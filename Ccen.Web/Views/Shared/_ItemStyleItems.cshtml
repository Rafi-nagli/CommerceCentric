
@using Amazon.Web.Models
@using Amazon.Web.ViewModels.Inventory
@model Amazon.Web.ViewModels.Inventory.StyleItemCollection

<script type="text/javascript">

    var StyleItemModel = function(styleItem) {
        var self = styleItem;

        self.color = ko.observable(styleItem.Color);
        self.size = ko.observable(styleItem.Size);
        self.sizeId = ko.observable(styleItem.SizeId);
        self.AutoGeneratedBarcode = ko.observable(styleItem.AutoGeneratedBarcode);
        self.Quantity = ko.observable(styleItem.Quantity);

        self.weight = ko.observable(styleItem.Weight);
        self.packageWidth = ko.observable(styleItem.PackageWidth);
        self.packageHeight = ko.observable(styleItem.PackageHeight);
        self.packageLength = ko.observable(styleItem.PackageLength);


        self.uiChecked = ko.observable(false);
        self.uiCheckedDate = ko.observable();
        self.uiChecked.subscribe(function() {
            var timestamp = new Date().getTime();
            if (self.uiChecked())
                self.uiCheckedDate(timestamp);
            else
                self.uiCheckedDate(null);
        });

        self.barcodes = ko.observableArray(self.Barcodes);
        var hasEmptyBarcode = self.barcodes() != null &&
            $.grep(self.barcodes(), function(n) {
                return n.Barcode == '' || n.Barcode == null;
            }).length > 0;

        if (!hasEmptyBarcode) {
            self.barcodes.push({
                Id: 0,
                Barcode: ""
            });
        }

        self.removeBarcode = function(barcode) {
            console.log("removeBarcode");
            self.barcodes.remove(barcode);
        };

        self.addBarcode = function() {
            console.log("addBarcode");
            self.barcodes.push({
                Id: 0,
                Barcode: ""
            });
        };

        return self;
    };

    var StyleItemListModel = function(model, settings) {
        var self = this;

        self.settings = settings;
        var styleItems = model.Items;

        if (styleItems == null)
            styleItems = [];

        console.log(styleItems);

        self.styleItems = ko.observableArray(styleItems.map(function(n, i) {
            var itemModel = new StyleItemModel(n);

            itemModel.uiChecked.subscribe(function() { self.onSelectionChanged(); });

            return itemModel;
        }));

        self.selectedSizes = ko.observableArray([]);
        self.selectedColor = ko.observable('');

        self.commonWeight = ko.observable();
        self.commonWeight.subscribe(function (val) {
            console.log(val);
            self.styleItems().forEach(function (s) {
                s.weight(val);
            })
        });

        self.commonPackageWidth = ko.observable();
        self.commonPackageWidth.subscribe(function (val) {
            console.log(val);
            self.styleItems().forEach(function (s) {
                s.packageWidth(val);
            })
        });

        self.commonPackageLength = ko.observable();
        self.commonPackageLength.subscribe(function (val) {
            console.log(val);
            self.styleItems().forEach(function (s) {
                s.packageLength(val);
            })
        });

        self.commonPackageHeight = ko.observable();
        self.commonPackageHeight.subscribe(function (val) {
            console.log(val);
            self.styleItems().forEach(function (s) {
                s.packageHeight(val);
            })
        });


        self.displayBarcodes = ko.observable(false);
        self.displayWeight = ko.observable(false);
        self.displayPackageSize = ko.observable(false);
        self.displayPrice = ko.observable(false);
        self.displayQuantity = ko.observable(false);
        self.displayBreakdown = ko.observable(false);
        self.displayBarcodeAutoGeneration = ko.observable(false);
        self.displayAddActions = ko.observable(false);


        self.actionStatus = ko.observable("");
        self.displayEditActions = ko.observable(false);
        self.displayActionCommit = ko.observable(false);
        self.displayCheckbox = ko.observable(false);
        self.displayEdit = ko.observable(false);
        self.activeActionName = ko.observable("");
        self.editableStyleItem = ko.observable({});
        self.inputSizeId = ko.observable();
        self.actionResultMessages = ko.observableArray([]);

        var mode = model.DisplayMode;
        console.log(mode);

        if (mode == '@((int)StyleItemDisplayMode.Standard)') {
            self.displayWeight(true);
            self.displayPrice(true);
            self.displayBarcodes(true);
            self.displayAddActions(true);
            self.displayEditActions(true);
            self.displayBarcodeAutoGeneration(true);
            self.displayPackageSize(true);
        }

        if (mode == '@((int)StyleItemDisplayMode.StandardNoActions)') {
            self.displayWeight(true);
            self.displayPrice(true);
            self.displayBarcodes(true);
            //self.displayAddActions(true);
            //self.displayEditActions(true);
            self.displayBarcodeAutoGeneration(true);
            self.displayPackageSize(true);
        } 

        if (mode == '@((int)StyleItemDisplayMode.WithQuantity)') {
            self.displayQuantity(true);
            self.displayWeight(true);
            self.displayBarcodes(true);
            self.displayAddActions(true);
            self.displayBarcodeAutoGeneration(true);
        }

        if (mode == '@((int)StyleItemDisplayMode.BoxQty)') {
            self.displayQuantity(true);
        }

        if (mode == '@((int)StyleItemDisplayMode.BoxBreakdown)') {
            self.displayBreakdown(true);
        }

        self.sizesByGroupSource = new kendo.data.DataSource({
            type: "aspnetmvc-ajax",
            transport: {
                read: '@Url.Action("GetSizeListByGroup", "AutoComplete")'
            },
            pageSize: 1000,
            serverPaging: false,
            serverFiltering: false
        });

        self.colorSource = new kendo.data.DataSource({
            type: "aspnetmvc-ajax",
            transport: {
                read: '@Url.Action("GetColorList", "AutoComplete")',
            }
        });

        self.checkStyleItemList = function(styleItems) {
            console.log("checkStyleItemList");
            var checkedStyleItems = [];
            var taskList = $.map(styleItems, function(n) {
                return self.checkStyleItem(n).done(function() {
                    checkedStyleItems.push(n);
                });
            });
            return $.when.apply($, taskList).then(function() {
                return checkedStyleItems;
            });
        }

        self.checkStyleItem = function(styleItem) {
            console.log("checkStyleItem");
            var defer = $.Deferred();

            if (styleItem.Id == 0) {
                defer.resolve();
                return defer;
            }

            $.ajax({
                url: '@Url.Action("CheckStyleItem", "Inventory")',
                data: {
                    styleItemId: styleItem.Id
                },
                success: function(result) {
                    if (result.Data)
                        defer.resolve();
                    else {
                        if (!self.settings.hasForseRemoveRights) {
                            defer.reject();
                        }
                        else {
                            Message.popupAsync({
                                title: 'Confirm',
                                message: 'Are you sure you want remove variation \"' + styleItem.size() + '\" that has linked listings/boxes/special cases?',
                                type: Message.YES_NO
                            }).done(function() {
                                defer.resolve();
                            }).fail(function() {
                                defer.reject();
                            });
                        }
                    }
                }
            });

            return defer;
        };

        self.manageStyleItemError = ko.observable('');
        self.addStyleItem = function() {
            console.log("addStyleItem: ");
            console.log(self.selectedSizes());
            $.ajax({
                url: '@Url.Action("GetSizesInfo", "Inventory")',
                data: {
                    sizeIdList: self.selectedSizes(),
                },
                traditional: true
            }).done(function(result) {
                console.log("check result");
                console.log(result);
                if (!result.IsSuccess) {
                    self.manageStyleItemError(result.Message);
                    return;
                }

                var color = self.selectedColor().trim();
                console.log(self.styleItems());
                result.Data.forEach(function(size) {
                    console.log(size.SizeId + "-" + color);
                    var existList = $.grep(self.styleItems(), function(n) {
                        return n.SizeId == size.SizeId && (n.Color || "") == color;
                    });
                    if (existList.length == 0) {
                        var itemModel = new StyleItemModel({
                            Id: 0,
                            Size: size.Size,
                            SizeId: size.SizeId,
                            Color: color,
                            SizeGroupName: size.SizeGroupName,
                            Weight: null,
                            Quantity: 5,
                            Breakdown: null,
                            Barcodes: []
                        });

                        self.styleItems.push(itemModel);
                    } else {
                        console.log("Size exist: " + size.Size);
                    }
                });

                self.selectedSizes([]);
                self.selectedColor('');
                self.manageStyleItemError('');
            });
        };

        self.removeStyleItem = function(styleItem) {
            self.checkStyleItem(styleItem).done(function() {
                self.styleItems.remove(styleItem);
            });
        };

        self.onMerge = function() {
            self.displayEditActions(false);
            self.displayActionCommit(true);
            self.displayCheckbox(true);

            self.activeActionName("Merge");
            self.actionStatus("Merge Mode");
        }

        self.onRemove = function() {
            self.displayEditActions(false);
            self.displayActionCommit(true);
            self.displayCheckbox(true);

            self.activeActionName("Remove");
            self.actionStatus("Remove Mode");
        }

        self.onEditStyleItem = function(styleItem) {
            self.editableStyleItem(styleItem);
            self.inputSizeId(styleItem.sizeId());
            console.log("InputSizeId: " + self.inputSizeId());
            self.displayActionCommit(true);
            self.displayEdit(false);
        };

        self.onChange = function() {
            self.displayEditActions(false);
            self.displayEdit(true);

            self.activeActionName("Change");
            self.actionStatus("Edit Mode");
        }

        self.commitAction = function(data, e) {
            var sender = $(e.target);
            var defer = $.Deferred();
            self.actionResultMessages.removeAll();

            if (self.activeActionName() == "Change") {

                if (self.editableStyleItem().Id != 0) {
                    helper.ui.showLoading(sender);
                    $.ajax({
                        url: '@Url.Action("ChangeStyleItem", "Inventory")',
                        data: {
                            styleItemId: self.editableStyleItem().Id,
                            inputSizeId: self.inputSizeId()
                        },
                        success: function(result) {
                            helper.ui.hideLoading(sender);
                            if (result.IsSuccess) {
                                var styleItem = result.Data;
                                var items = $.grep(self.styleItems(), function(i) {
                                    return i.Id == styleItem.Id;
                                });
                                if (items.length > 0) {
                                    items[0].sizeId(styleItem.SizeId);
                                    items[0].size(styleItem.Size);
                                }
                                
                                defer.resolve();
                            } else {
                                defer.reject();
                            }
                            self.actionResultMessages(result.Messages);
                        }
                    });
                } else {
                    self.actionResultMessages.push(new MessageString("The operation can not be performed on unsaved records", MessageStatus.WARNING));
                }
            }

            if (self.activeActionName() == "Remove") {
                helper.ui.showLoading(sender);

                var styleItemsToRemove = self.getCheckedSizes();
                
                if (styleItemsToRemove.length > 0) {
                    self.checkStyleItemList(styleItemsToRemove).done(function(passStyleItems) {
                        var styleItemIdList = $.grep($.map(passStyleItems, function(si) { return si.Id; }), function(si) { return si != 0; });
                        console.log(styleItemIdList);

                        $.ajax({
                            url: '@Url.Action("RemoveStyleItems", "Inventory")',
                            data: {
                                styleItemIdList: styleItemIdList
                            },
                            traditional: true,
                            success: function(result) {
                                helper.ui.hideLoading(sender);
                                if (result.IsSuccess) {
                                    self.styleItems.remove(function(si) {
                                        //NOTE: to remove unsaved items
                                        return si.uiChecked(); // styleItemIdList.indexOf(si.Id) >= 0;
                                    });

                                    defer.resolve();
                                } else {
                                    defer.reject();
                                }
                                self.actionResultMessages(result.Messages);
                            },
                            error: function() {
                                defer.reject();
                            }
                        });
                    }).fail(function() {
                        defer.reject();
                        helper.ui.hideLoading(sender);
                    });
                } else {
                    defer.reject();
                    self.actionResultMessages.push(new MessageString("No selected items", MessageStatus.WARNING));
                    helper.ui.hideLoading(sender);
                }
            }

            if (self.activeActionName() == "Merge") {
                helper.ui.showLoading(sender);

                var checkedStyleItems = self.getCheckedSizes();
                if (checkedStyleItems.length > 1) {
                    if (checkedStyleItems[0].Id != 0
                        && checkedStyleItems[1].Id != 0) {
                        var toStyleItem = checkedStyleItems[0];
                        var fromStyleItem = checkedStyleItems[1];

                        $.ajax({
                            url: '@Url.Action("MergeStyleItems", "Inventory")',
                            data: {
                                toStyleItemId: toStyleItem.Id,
                                fromStyleItemId: fromStyleItem.Id
                            },
                            success: function(result) {
                                helper.ui.hideLoading(sender);
                                if (result.IsSuccess) {
                                    if (toStyleItem.Weight == null) {
                                        console.log("new weight=" + fromStyleItem.weight());
                                        toStyleItem.weight(fromStyleItem.weight());
                                    }

                                    var toBarcodes = toStyleItem.barcodes();
                                    toBarcodes.splice(toBarcodes.length - 1); //Remove empty barcodes
                                    toStyleItem.barcodes(dataUtils.concatArray(toBarcodes, fromStyleItem.barcodes()));

                                    self.styleItems.remove(function(si) {
                                        return si.Id == fromStyleItem.Id;
                                    });

                                    defer.resolve();
                                } else {
                                    defer.reject();
                                }
                                self.actionResultMessages(result.Messages);
                            }
                        });
                    } else {
                        self.actionResultMessages.push(new MessageString("The operation can not be performed on unsaved records", MessageStatus.WARNING));
                    }
                } else {
                    self.actionResultMessages.push(new MessageString("No selected items", MessageStatus.WARNING));
                }
            }

            defer.always(function() {
                console.log("main defer, then");
                self.activeActionName("");
                self.editableStyleItem({});
                self.actionStatus("");

                self.displayEditActions(true);
                self.displayActionCommit(false);
            });

            self.displayCheckbox(false);
        }

        self.cancelAction = function(data, e) {
            self.actionResultMessages.removeAll();

            self.displayEditActions(true);
            self.displayActionCommit(false);
            self.displayCheckbox(false);

            self.activeActionName("");
            self.editableStyleItem({});
            self.actionStatus("");

            self.clearSizeSelection();
        }

        self.onSelectionChanged = function() {
            var list = self.getCheckedSizes();
            if (self.activeActionName() == "Remove") {
                self.actionStatus(self.activeActionName() + ": " + list.map(function(si) { return si.size(); }).join(", "));
            }

            if (self.activeActionName() == "Merge") {
                var text = self.activeActionName();
                if (list.length > 0)
                    text += ", to: " + list[0].size();
                if (list.length > 1)
                    text += ", from: " + list[1].size();
                self.actionStatus(text);
            }
        }

        self.clearSizeSelection = function() {
            $(self.styleItems(), function(i, n) {
                n.uiChecked(false);
            });
        }

        self.getCheckedSizes = function() {
            var list = [];
            var items = self.styleItems();
            items.sort(function(i1, i2) {
                var d1 = i1.uiCheckedDate() || 0;
                var d2 = i2.uiCheckedDate() || 0;
                if (d1 == d2) {
                    return 0;
                }
                return d1 > d2 ? 1 : -1;
            });
            $.each(items, function(i, n) {
                if (n.uiChecked())
                    list.push(n); //sizeId
            });
            return list;
        }
    };
</script>


<script type="text/javascript">
    var styleItemList = null;

    $(document).ready(function() {
        var styleItems = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

        var settings = {
            hasForseRemoveRights: @(AccessManager.IsAdmin ? 1 : 0),
        };

        styleItemList = new StyleItemListModel(styleItems, settings);

        ko.validation.init({
            errorElementClass: "input-validation-error",
            //errorClass: "input-validation-error",
            errorMessageClass: "field-validation-error",
            decorateElement: true,
            decorateInputElement: true,
            decorateElementOnModified: true
        });

        ko.applyBindings(styleItemList, document.getElementById('styleStyleItems'));

        if (typeof styleModel != 'undefined') {
            if (styleModel != null && styleModel != undefined) {
                styleModel.styleItemsList(styleItemList);
            }
        }
    });
</script>

<!-- ko stopBinding: true -->

<div id="styleStyleItems">
    <div class="panel panel-default">
        <div class="panel-heading">
            <div>
                <div>
                    @(Model.Title ?? "Sizes")
                    
                    <span data-bind="text: actionStatus"
                          class="gray"
                          style="margin: 0px 0px 0px 10px"></span>
                    <span data-bind="visible: displayEditActions">
                        <a href="javascript:;"
                           class="k-button"
                           data-bind="click: onMerge"
                           style="margin: 0px 5px 0px 5px">
                            <span class="glyphicon glyphicon-join am-icon"></span>merge
                        </a>
                        <a href="javascript:;"
                           data-bind="click: onChange"
                           class="k-button">
                            <span class="glyphicon glyphicon-pencil am-icon"></span>change
                        </a>
                        <a href="javascript:;"
                           data-bind="click: onRemove"
                           class="k-button">
                            <span class="glyphicon glyphicon-remove am-icon"></span>remove
                        </a>
                    </span>
                </div>
            </div>
            <div>
                <messages params="{ messages: actionResultMessages }"></messages>
            </div>
            <div data-bind="visible: displayActionCommit">
                <div data-bind="visible: activeActionName() == 'Change'"
                     style="padding: 5px 10px 0px 20px">
                    <div style="padding: 3px 0px 8px 0px">
                        <b>Edit Size:</b>
                    </div>
                    <div style="padding-left: 10px">
                        <div style="padding-bottom: 8px">From size: <span data-bind="text: editableStyleItem().size"></span></div>
                        <div>
                            To size:
                            <select style="width: 160px"
                                    data-bind="kendoDropDownList: {
                        dataSource: sizesByGroupSource,
                        data: {},
                        value: inputSizeId,
                        dataTextField: 'Name',
                        dataValueField: 'Id',
                        /*autoClose: false,*/
                        itemTemplate: kendo.template($('#size-template').html()) }"></select>
                        </div>
                    </div>
                </div>

                <div style="padding: 8px 0px 8px 25px">
                    <div style="float: left">
                        <button class="k-button"
                                data-bind="click: commitAction"
                                style="margin-right: 10px">
                            <span class="k-icon k-update am-icon"></span>commit
                        </button>
                    </div>
                    <div style="float: left">
                        <button data-bind="click: cancelAction"
                           class="k-button">
                            <span class="k-icon k-cancel am-icon"></span>cancel
                        </button>
                    </div>
                    <div class="clear"></div>
                </div>
            </div>
        </div>

        <div class="panel-body">
            <div style="padding-left: 5px; padding-top: 5px">
                <div>
                    <table class="size-table" style="margin-bottom: 0;">
                        <tr>
                            <td data-bind="visible: displayCheckbox" style="width: 15px">
                            </td>
                            <td data-bind="visible: displayEdit" style="width: 15px">
                            </td>
                            <td style="width: 100px">
                            </td>
                            <td data-bind="visible: displayQuantity">
                            </td>
                            <td data-bind="visible: displayBreakdown">
                            </td>
                            <td data-bind="visible: displayWeight" style="width: 65px">
                                <input style='width: 50px' class="k-textbox" data-bind='value: commonWeight' placeholder="All" autocomplete='off' />
                            </td>
                            <td data-bind="visible: displayPackageSize">
                                <input style='width: 50px' class="k-textbox" data-bind='value: commonPackageWidth' placeholder="All" autocomplete='off' />
                            </td>
                            <td data-bind="visible: displayPackageSize">
                                <input style='width: 50px' class="k-textbox" data-bind='value: commonPackageHeight' placeholder="All" autocomplete='off' />
                            </td>
                            <td data-bind="visible: displayPackageSize">
                                <input style='width: 50px' class="k-textbox" data-bind='value: commonPackageLength' placeholder="All" autocomplete='off' />
                            </td>
                            <td data-bind="visible: displayBarcodes">
                            </td>
                        </tr>
                    </table>
                    <table class="size-table">
                        <tr>
                            <th data-bind="visible: displayCheckbox" style="width: 15px"></th>
                            <th data-bind="visible: displayEdit" style="width: 15px"></th>
                            <th style="width: 100px">Size/Color</th>
                            <th data-bind="visible: displayQuantity">Qty</th>
                            <th data-bind="visible: displayBreakdown">Breakdown</th>
                            <th style="width: 65px"
                                data-bind="visible: displayWeight">Weight</th>
                            <th data-bind="visible: displayPackageSize">Width</th>
                            <th data-bind="visible: displayPackageSize">Height</th>
                            <th data-bind="visible: displayPackageSize">Length</th>
                            <th data-bind="visible: displayBarcodes">Barcodes</th>
                        </tr>
                        <tbody data-bind='foreach: styleItems'>
                            <tr>
                                <td data-bind="visible: $root.displayCheckbox">
                                    <input type="checkbox" data-bind='checked: uiChecked' />
                                </td>
                                <td data-bind="visible: $root.displayEdit">
                                    <a data-bind='click: $root.onEditStyleItem' style="width: 27px" class="k-button"><span class='glyphicon glyphicon-pencil am-icon'></span></a>
                                </td>
                                <td>
                                    <input type="hidden" data-bind='value: Id, attr: { name: "StyleItems.Items[" + $index() + "].Id" }' />
                                    <input type="hidden" data-bind='value: size, attr: { name: "StyleItems.Items[" + $index() + "].Size" }' />
                                    <input type="hidden" data-bind='value: sizeId, attr: { name: "StyleItems.Items[" + $index() + "].SizeId" }' />
                                    <input type="hidden" data-bind='value: color, attr: { name: "StyleItems.Items[" + $index() + "].Color" }' />
                                    <input type="hidden" data-bind='value: SizeGroupName, attr: { name: "StyleItems.Items[" + $index() + "].SizeGroupName" }' />
                                    <div><span data-bind="text: size"></span> / <span data-bind="textFormatted: color, ifEmpty: '-'"></span></div>
                                </td>
                                <td data-bind="visible: $root.displayQuantity">
                                    <input style='width: 50px' type="number" class="k-textbox" data-bind='value: Quantity, attr: { name: "StyleItems.Items[" + $index() + "].Quantity", tabindex: $index() + 100 }' autocomplete='off' />
                                </td>
                                <td data-bind="visible: $root.displayBreakdown">
                                    <input style='width: 80px' type="number" class="k-textbox" data-bind='value: Breakdown, attr: { name: "StyleItems.Items[" + $index() + "].Breakdown", tabindex: $index() + 200 }' autocomplete='off' />
                                </td>
                                <td data-bind="visible: $root.displayWeight">
                                    <input style='width: 50px' class="k-textbox" data-bind='value: weight, attr: { name: "StyleItems.Items[" + $index() + "].Weight", tabindex: $index() + 300 }' autocomplete='off' />
                                </td>
                                <td data-bind="visible: $root.displayPackageSize">
                                    <input style='width: 50px' class="k-textbox" data-bind='value: packageWidth, attr: { name: "StyleItems.Items[" + $index() + "].PackageWidth", tabindex: $index() + 100 }' autocomplete='off' />
                                </td>
                                <td data-bind="visible: $root.displayPackageSize">
                                    <input style='width: 50px' class="k-textbox" data-bind='value: packageHeight, attr: { name: "StyleItems.Items[" + $index() + "].PackageHeight", tabindex: $index() + 200 }' autocomplete='off' />
                                </td>
                                <td data-bind="visible: $root.displayPackageSize">
                                    <input style='width: 50px' class="k-textbox" data-bind='value: packageLength, attr: { name: "StyleItems.Items[" + $index() + "].PackageLength", tabindex: $index() + 300 }' autocomplete='off' />
                                </td>
                                <td data-bind="visible: $root.displayBarcodes">
                                    <div data-bind='foreach: barcodes'>
                                        <input type="hidden" data-bind='value: Id, attr: { name: "StyleItems.Items[" + $parentContext.$index() + "].Barcodes[" + $index() + "].Id" }' />
                                        <input style='width: 110px' class="k-textbox" data-bind='value: Barcode, attr: { name: "StyleItems.Items[" + $parentContext.$index() + "].Barcodes[" + $index() + "].Barcode", tabindex: $index() * 10 + 1000 }' />
                                        <a data-bind='click: $parent.removeBarcode, if: ($index() != ($parent.barcodes().length - 1) && ($parent.barcodes().length > 1))' class="barcode-button"><span class="k-icon k-delete"></span></a>
                                        <a data-bind='click: $parent.addBarcode, if: ($index() === ($parent.barcodes().length - 1))' class="barcode-button"><span class="k-icon k-add"></span></a>
                                    </div>
                                    <div data-bind="visible: $root.displayBarcodeAutoGeneration" style="margin-left: 5px">
                                        <input type="checkbox" data-bind='checked: AutoGeneratedBarcode, attr: { name: "StyleItems.Items[" + $index() + "].AutoGeneratedBarcode" }' /> PA UPC
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>

                    <div data-bind="visible: displayAddActions">
                        <table style="margin: 40px 0px 4px 0px">
                            <tr>
                                <th>Sizes</th>
                                <th>Color</th>
                            </tr>
                            <tr>
                                <td>
                                    <select style="width: 160px"
                                            data-bind="kendoMultiSelect: {
                                dataSource: sizesByGroupSource,
                                data: {},
                                value: selectedSizes,
                                dataTextField: 'Name',
                                dataValueField: 'Id',
                                /*autoClose: false,*/
                                itemTemplate: kendo.template($('#size-template').html()) }"></select>
                                </td>
                                <td>
                                    <input type="text"
                                           style="width: 160px"
                                           data-bind="kendoAutoComplete: {
                                               dataSource: colorSource,
                                               value: selectedColor,
                                               highlightFirst: true,
                                               }" class="k-textbox" />

                                </td>
                            </tr>
                        </table>
                        <button type="button" class="k-button" style="width: 80px" data-bind='click: addStyleItem'>
                            <span class="k-icon k-add am-icon"></span>Add
                        </button>
                        <div data-bind="html: manageStyleItemError"></div>
                    </div>
                </div>
            </div>
            <div class="clear"></div>
        </div>
    </div>
</div>


<script id="size-template" type="text/x-kendo-template">
    <span class="gray">#: GroupName #</span> <span>#: Name #</span>
</script>

<!-- /ko -->