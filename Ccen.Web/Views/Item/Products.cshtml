@using Amazon.Common.Helpers
@using Amazon.Core.Entities.Enums
@using Amazon.Core.Models
@using Amazon.Model.Implementation.Markets
@using Amazon.Web.Models
@using Amazon.Web.ViewModels.Pages
@model ProductPageViewModel
@{
    ViewBag.Title = "Listings " + MarketHelper.GetDotShortName((int)Model.Market, Model.MarketplaceId);
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Icon
{
    <link rel="shortcut icon" href="/Content/Images/products.ico" />
}

@section Head {
    <script src="~/Scripts/highcharts/4.2.3/js/highcharts.js"></script>
}

<style>
    .filter .input-validation-error {
        border: 1px solid #ff0000;
        background-color: #ffeeee;
    }

    .asin-note-list {
        margin: 0px;
        padding-left: 15px;
    }

    .k-grid tbody a.k-button {
        min-width: 78px;
    }

    .product-image-holder {
        width: 75px;
        height: 75px;
        border: 1px lightgray solid;
        background-color: #efefef;
        text-align: center;
    }

        .product-image-holder img {
            max-width: 75px;
            max-height: 75px;
            border: 0px;
        }

    .product-image-actions {
        border: 1px lightgray solid;
        border-top: none;
        background-color: #efefef;
        text-align: center;
    }

        .product-image-actions .on {
            margin-right: 5px;
            color: gray;
        }

        .product-image-actions .off {
            margin-right: 5px;
            color: green;
        }
</style>

<script src="@Url.Content("~/Scripts/jquery.poshytip.js")" type="text/javascript"></script>

@Html.Partial("ActualizeGrouponQtyPopupContent")
@Html.Partial("ImportCatalogFeedPopupContent")

<div id="page-content">

    <ol class="breadcrumb">
        <li><a href="#">Listings</a></li>
        <li class="active"><span data-bind="text: title()"></span></li>
    </ol>

    <div class="panel panel-default">
        <div class="filters grid-small">
            <table style="width: 100%">
                <colgroup>
                    <col />
                    <col style="width: 400px" />
                </colgroup>
                <tr>
                    <td>
                        <table>
                            <colgroup>
                                <col style="width: 120px; text-align: right" />
                                <col style="width: 180px" />
                                <col style="width: 120px; text-align: right" />
                                <col style="width: 160px" />
                                <col style="width: 120px; text-align: right" />
                                <col style="width: 160px" />
                            </colgroup>
                            <tr>
                                <th>Keywords: </th>
                                <td><input type="text" data-bind="value: searchFilters.keywords, valueUpdate: 'afterkeydown', event: { keypress: searchByKeyCmd }" class="k-textbox" /> </td>
                                <th>Gender:</th>
                                <td>
                                    <input data-bind="kendoDropDownList: { data: searchFilters.genderList, value: searchFilters.gender, dataTextField: 'Text', dataValueField: 'Value', optionLabel: 'Select...' }" />
                                </td>
                                <th style="padding-left: 23px">Price From: </th>
                                <td>
                                    <input type="text" class="k-textbox" data-bind="value: searchFilters.priceFrom" min="0" max="1000" style="width: 50px" />
                                </td>
                            </tr>
                            <tr>
                                <th>Availability:</th>
                                <td>
                                    <input style="width: 180px" data-bind="kendoDropDownList: { data: searchFilters.availabilityList, value: searchFilters.availability, dataTextField: 'Text', dataValueField: 'Value' }" />
                                </td>
                                <th>Main License:</th>
                                <td>
                                    <input style="width: 180px" data-bind="kendoDropDownList: { data: searchFilters.mainLicenseList, value: searchFilters.mainLicense, dataTextField: 'Text', dataValueField: 'ParentValue', optionLabel: 'Select...' }" />
                                </td>
                                <th style="padding-left: 80px">To: </th>
                                <td>
                                    <input type="text" class="k-textbox" data-bind="value: searchFilters.priceTo" min="0" max="1000" style="width: 50px" />
                                </td>
                            </tr>
                            <tr>
                                <th>Selling History:</th>
                                <td>
                                    <input id="SellingHistory" name="SellingHistory" style="width: 180px" data-bind="kendoDropDownList: { data: searchFilters.noneSoldPeriodList, value: searchFilters.noneSoldPeriod, dataTextField: 'Text', dataValueField: 'Value' }" />
                                </td>
                                <th>Sub License:</th>
                                <td>
                                    <input id="SubLicense" style="width: 180px" data-bind="kendoDropDownList: {data: subLicenseList, value: searchFilters.subLicense, dataTextField: 'Text', dataValueField: 'Value', optionLabel: 'Select...', enabled: enableSubLicense }" />
                                </td>
                            </tr>
                            <tr>
                                <th>Style: </th>
                                <td>
                                    <input type="text"
                                           style="width: 180px"
                                           data-bind="kendoAutoComplete: {
                                               value: searchFilters.styleName,
                                               data: {},
                                               minLenght: 3,
                                                highlightFirst: true,
                                               dataSource: styleIdSource },
                                            valueUpdate: 'afterkeydown',
                                            event: { keypress: searchByKeyCmd }"
                                           class="k-textbox" />
                                </td>
                                <th>Sizes</th>
                                <td><select style="width: 180px" data-bind="kendoMultiSelect: {data: searchFilters.allSizesArray, value: searchFilters.selectedSizes }"></select></td>
                            </tr>
                            <tr>
                                <th data-bind="visible: (isAmazon() && !isFBA())">FBA Listings: </th>
                                <td data-bind="visible: (isAmazon() && !isFBA())">
                                    <input style="width: 180px" data-bind="kendoDropDownList: { data: searchFilters.listingsModeList, value: searchFilters.listingsMode, dataTextField: 'Text', dataValueField: 'Value' }" />
                                </td>
                                <th>OnHold: </th>
                                <td>
                                    <input style="width: 180px" data-bind="kendoDropDownList: { data: searchFilters.onHoldModeList, value: searchFilters.onHoldMode, dataTextField: 'Text', dataValueField: 'Value' }" />
                                </td>
                                <th>Status: </th>
                                <td>
                                    <input style="width: 180px" data-bind="kendoDropDownList: { data: searchFilters.publishedStatusList, value: searchFilters.publishedStatus, dataTextField: 'Text', dataValueField: 'Value', optionLabel: 'All', }" />
                                </td>
                            </tr>
                            <tr>
                                <td colspan="4">
                                    <div style="padding-top: 10px; text-align: left">
                                        <button class="k-button" style="margin: 0 10px 0 0; padding: 3px 20px 3px 20px" data-bind="click: search">Search</button>
                                        <button class="k-button" style="margin: 0 0 0 0; padding: 3px 20px 3px 20px" data-bind="click: clear">Clear</button>
                                        <button class="k-button" style="margin: 0 10px 0 50px; padding: 3px 20px 3px 20px" data-bind="click: searchFullRefresh"><span class='glyphicon glyphicon-refresh am-icon'></span>Full Refresh</button>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </td>
                    <th style="text-align: right; vertical-align: bottom; width: 300px">
                        @if (AccessManager.CanEditProduct())
                        {
                            <div class="export-panel" style="float: right; padding-bottom: 25px">
                                <table>
                                    <tr>
                                        <td>
                                            <div>
                                                ASIN: <input type="text" data-bind="value: exportASIN, valueUpdate: 'afterkeydown'" class="k-textbox" style='width: 130px; padding-top: 3px' />
                                            </div>
                                            <div style="margin-left: 20px">
                                                <input type="checkbox" data-bind="checked: useStyleImage" /> Use style image
                                            </div>
                                            <div style="padding: 2px 0px">
                                                <div class="flag-icon" style="margin-left: 15px"><input style="margin-top: 8px" type="radio" value="@(MarketplaceKeeper.AmazonUkMarketplaceId)" data-bind="checked: generateForMarket" /><span class="flag-UK flag-icon"></span></div>
                                                <div class="flag-icon" style="margin-left: 15px"><input style="margin-top: 8px" type="radio" value="@(MarketplaceKeeper.AmazonCaMarketplaceId)" data-bind="checked: generateForMarket" /><span class="flag-CA flag-icon"></span></div>
                                                <div class="flag-icon" style="margin-left: 15px"><input style="margin-top: 8px" type="radio" value="@(MarketplaceKeeper.AmazonComMarketplaceId)" data-bind="checked: generateForMarket" /><span class="flag-US flag-icon"></span></div>
                                                <div class="clear"></div>
                                            </div>
                                        </td>
                                        <td style="vertical-align: top">
                                            <a data-bind="attr: { href: exportToExcelUrl }" class="k-button" style="padding-left: 10px; padding-right: 10px"><img src="/Images/excel.png" width="20" style="margin-right:2px" />Export...</a>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            if (AccessManager.CanEditProduct()
                                && Model.Market == MarketType.Groupon)
                            {
                                <div>
                                    <a href="#"
                                       class="k-button"
                                       style="margin-right: 20px"
                                       data-bind="click: actualizeGrouponQty">
                                        <img src="/Images/excel.png" width="20" style="margin-right:2px" />
                                        Actualize Groupon Qty...
                                    </a>
                                </div>
                            }
                            if (AccessManager.CanEditProduct()
                                && Model.Market == MarketType.WalmartCA)
                            {
                                <div>
                                    <a href="#"
                                       class="k-button"
                                       style="margin-right: 20px"
                                       data-bind="click: importCatalogFeed">
                                        <img src="/Images/excel.png" width="20" style="margin-right:2px" />
                                        Import Catalog Feed...
                                    </a>
                                </div>
                            }

                            if (AccessManager.CanEditProduct()
                                && Model.MarketplaceId == MarketplaceKeeper.AmazonComMarketplaceId)
                            {
                                <div>
                                    <a href="#"
                                       class="k-button"
                                       style="margin-right: 20px"
                                       data-bind="attr: { href: exportReturnExemptionsUrl }">
                                        <img src="/Images/excel.png" width="20" style="margin-right:2px" />
                                        Export Return Exemptions
                                    </a>
                                </div>
                            }
                            <div class="clear"></div>
                            <div>
                                <div style="padding: 0 10px 5px 5px" class="text-success"><span data-bind="text: requestUpdateStatus"></span></div>
                                Last updated: <span id="updateTime">@Model.LastListingsSyncDate</span>
                                <button class="k-button" style="margin: 0 10px 0 0; padding: 3px 10px 3px 10px" data-bind="click: requestListingsUpdate"><span class='glyphicon glyphicon-refresh am-icon'></span>Request items sync</button>
                                <button class="k-button" style="margin: 0 10px 0 0; padding: 3px 10px 3px 10px" data-bind="click: pauseListingsUpdate, text: syncPauseText"></button>
                            </div>
                        }
                    </th>
                </tr>
            </table>
        </div>
    </div>

    <details class="warning-list" data-bind="visible: warningProductDefectList().length != 0">
        <summary data-bind="html: warningProductDefectSummary"></summary>
        <div data-bind='foreach: warningProductDefectList' class="block-items">
            <div>
                <a href="javascript:;" data-bind="click: clickWarningProduct"><span data-bind="text: ASIN"></span></a>
                &nbsp;-&nbsp;<span data-bind="html: message"></span>
            </div>
        </div>
    </details>

    <details class="warning-list" data-bind="visible: warningProductQtyList().length != 0">
        <summary data-bind="html: warningProductQtySummary"></summary>
        <div data-bind='foreach: warningProductQtyList' class="block-items">
            <div>
                <a href="javascript:;" data-bind="click: clickWarningProduct"><span data-bind="text: ASIN"></span></a>
                &nbsp;-&nbsp;<span data-bind="html: message"></span>
            </div>
        </div>
    </details>

    <div class="k-toolbar k-grid-toolbar">
        @if (AccessManager.CanEditProduct()
        && (Model.Market == MarketType.Magento
        || Model.Market == MarketType.eBay
        || Model.Market == MarketType.Walmart
        || Model.Market == MarketType.WalmartCA
        || Model.Market == MarketType.Jet
        || Model.Market == MarketType.Shopify
        || Model.Market == MarketType.Groupon
        || Model.Market == MarketType.DropShipper
        || (Model.Market == MarketType.Amazon && Model.MarketplaceId == MarketplaceKeeper.AmazonComMarketplaceId)
        || Model.Market == MarketType.AmazonAU
        || Model.Market == MarketType.AmazonIN
        || Model.Market == MarketType.AmazonEU))
        {
            <a href="#"
               class="k-button k-button-icontext k-grid-add"
               style="margin-right: 20px"
               data-bind="click: addProduct">
                <span class="k-icon k-add"></span>
                New product
            </a>
        }

        @if (Model.Market == MarketType.Walmart)
        {
            <a href="#"
               class="k-button"
               style="margin-right: 20px"
               data-bind="click: lookupBarcode">
                <span class="glyphicon glyphicon-search am-icon"></span>
                Lookup Barcode on Walmart
            </a>
        }

        @if (Ccen.Web.AppSettings.IsDebug)
        {
            <span>at: <span data-bind="text: getItemsReceiveDate"></span>, in: <span data-bind="text: getItemsDuration"></span></span>
        }
    </div>

    <div class="grid-small">
        <div data-bind='component: {
                name: "grid-pager",
                params: { itemCount: grid.itemCount, pageIndex: grid.pageIndex, itemsPerPage: grid.itemsPerPage, refreshCallback: grid.reload }
            }'></div>

        <div data-bind='component: {
                 name: "fast-grid",
                 params: fastGridSettings }'></div>

        <div data-bind='component: {
                name: "grid-pager",
                params: { itemCount: grid.itemCount, pageIndex: grid.pageIndex, itemsPerPage: grid.itemsPerPage, refreshCallback: grid.reload }
            }'></div>
    </div>
</div>


<script type="text/kendo-tmpl" id="item-row-template">
    <tr class="k-master-row #=data._isAlt ? 'k-alt': ''#" row-uid="#=data.Id#">
        <td class="k-hierarchy-cell">
            <a class="k-icon k-plus" href='javascript: void(0)' onclick='productVm.toggleGridRow("#=data.ASIN#")' tabindex="-1"></a>
        </td>
        <td>#= data._pageIndex #</td>
        @if (Model.Market == MarketType.Amazon && Model.MarketplaceId == MarketplaceKeeper.AmazonComMarketplaceId)
        {
            <td>#= tmpl.t('amazon-asin-column-template', data)#</td>
        }
        @if (Model.Market == MarketType.AmazonAU
            || Model.Market == MarketType.AmazonIN
            || Model.Market == MarketType.AmazonEU
            || (Model.Market == MarketType.Amazon && Model.MarketplaceId != MarketplaceKeeper.AmazonComMarketplaceId))
        {
            <td>#= tmpl.t('amazon-asin-column-template', data)#</td>
        }
        @if (Model.Market == MarketType.Walmart
            || Model.Market == MarketType.WalmartCA)
        {
            <td>#= tmpl.t('walmart-asin-column-template', data)#</td>
        }
        @if (Model.Market == MarketType.eBay
            || Model.Market == MarketType.Shopify
            || Model.Market == MarketType.Magento
            || Model.Market == MarketType.Groupon
            || Model.Market == MarketType.OverStock
            || Model.Market == MarketType.Jet
            || Model.Market == MarketType.DropShipper)
        {
            <td>#= tmpl.t('general-asin-column-template', data)#</td>
        }
        <td>#= tmpl.t('image-name-column-template', data)#</td>
        @if (Model.Market == MarketType.Amazon 
            || Model.Market == MarketType.AmazonEU 
            || Model.Market == MarketType.AmazonAU
            || Model.Market == MarketType.AmazonIN)
        {
            <td>
                <div>#= tmpl.t('rank-column-template', data)#</div>
                <div>#= tmpl.t('position-column-template', data)#</div>
            </td>
        }
        <td>#= tmpl.t('price-column-template', data)#</td>
        <td>#= tmpl.f(data.LastChildOpenDate, 'MM.dd.yyyy HH:mm')#</td>
        <td>#= tmpl.t('remaining-styleitem-column-template', data)#</td>
        @if (AccessManager.CanEditProduct())
        {
            <td>#= tmpl.t('item-action-column-template', data)#</td>
        }
        <td>
            #if (!dataUtils.isNullOrEmpty(data.Comment)) {#
                <div class='remark'>#= tmpl.isNull(data.Comment, '')#</div>
                <div class="remark gray">at: #=tmpl.f(data.CommentDate, 'MM.dd.yyyy HH:mm')#, by: #= tmpl.isNull(data.CommentByName, '-')#</div>
            #}#
        </td>
    </tr>
    <tr class="k-detail-row" id="Detail_#=data.ASIN#" style="display:none" row-uid="#=data.Id#">
        <td class="k-hierarchy-cell"></td>
        <td class="k-detail-cell" colspan="11">
            <div>
                <div class="k-widget k-grid k-secondary">
                    <div class="k-loading-mask" id="ChildItems_Loading_#=data.ASIN#" style="width: 100%; height: 100%; top: 0px; left: 0px; display: none">
                        <span class="k-loading-text">Loading...</span>
                        <div class="k-loading-image"></div>
                        <div class="k-loading-color"></div>
                    </div>

                    <table cellspacing="0">
                        <colgroup>
                            <col width="120px" />
                            <col width="90px" />
                            <col width="100px" />
                            <col width="80px" />
                            <col width="150px" />
                            <col width="100px" />
                            <col width="150px" />
                            <col width="160px" />
                            <col width="120px" />
                            @if (MarketHelper.IsAmazon(Model.Market))
                            {
                                <col />
                            }
                            <col width="160px">
                            @if (AccessManager.CanEditProduct())
                            {
                                <col width="100px" />
                            }
                        </colgroup>
                        <thead class="k-grid-header">
                            <tr>
                                <th class="k-header">
                                    @if (MarketHelper.IsAmazon(Model.Market))
                                    {
                                        <span class="k-link">ASIN</span>
                                    }
                                    else
                                    {
                                        <span class="k-link">Market Id</span>
                                    }
                                </th>
                                <th class="k-header"><span class="k-link">Picture</span></th>
                                <th class="k-header"><span class="k-link">Size</span></th>
                                <th class="k-header"><span class="k-link">Color</span></th>
                                <th class="k-header"><span class="k-link">Barcode</span></th>
                                <th class="k-header"><span class="k-link">Weight</span></th>
                                <th class="k-header"><span class="k-link">Quantity</span></th>
                                <th class="k-header"><span class="k-link">Remaining</span></th>
                                <th class="k-header"><span class="k-link">Price</span></th>
                                @if (Model.Market == MarketType.Amazon 
                                    || Model.Market == MarketType.AmazonEU 
                                    || Model.Market == MarketType.AmazonAU
                                    || Model.Market == MarketType.AmazonIN)
                                {
                                    <th class="k-header"><span class="k-link">BuyBox Price</span></th>
                                }
                                <th class="k-header"><span class="k-link">Style ID/SKU</span></th>
                                @if (AccessManager.CanEditProduct())
                                {
                                    <th class="k-header"><span class="k-link">&nbsp;</span></th>
                                }
                            </tr>
                        </thead>
                        <tbody id="ChildItems_#=data.ASIN#"></tbody>
                    </table>
                    <div class="k-pager-wrap k-grid-pager pagerTop k-widget" style="border-width: 0px 0px 1px;">
                        <a href="javascript:;"
                           class="k-pager-refresh k-link"
                           title="Refresh"
                           onclick='productVm.refreshChildsFor("#=data.ASIN#")'>
                            <span class="k-icon k-i-refresh">Refresh</span>
                        </a>
                    </div>
                </div>
            </div>
        </td>
    </tr>
</script>


<script type="text/kendo-tmpl" id="child-item-row-template">
    <tr class="k-master-row">
        @if (Model.Market == MarketType.Amazon && Model.MarketplaceId == MarketplaceKeeper.AmazonComMarketplaceId)
        {
            <td>#= tmpl.t('amazon-item-asin-column-template', data)#</td>
        }

        @if (Model.Market == MarketType.AmazonAU
            || Model.Market == MarketType.AmazonIN
            || Model.Market == MarketType.AmazonEU
            || (Model.Market == MarketType.Amazon && Model.MarketplaceId != MarketplaceKeeper.AmazonComMarketplaceId))
        {
            <td>#= tmpl.t('general-item-asin-column-template', data)#</td>
        }

        @if (Model.Market == MarketType.Walmart
            || Model.Market == MarketType.WalmartCA)
        {
            <td>#= tmpl.t('walmart-item-asin-column-template', data)#</td>
        }

        @if (Model.Market == MarketType.eBay
            || Model.Market == MarketType.Shopify
            || Model.Market == MarketType.Magento
            || Model.Market == MarketType.Jet
            || Model.Market == MarketType.Groupon
            || Model.Market == MarketType.OverStock)
        {
            <td>#= tmpl.t('general-item-asin-column-template', data)#</td>
        }

        <td>#= tmpl.t('item-image-column-template', data)#</td>
        <td>#= tmpl.t('item-size-column-template', data)#</td>
        <td>#= data.Color#</td>
        <td>#= tmpl.isNull(data.Barcode, '-')#</td>
        <td>#= data.Weight#</td>
        <td>#= tmpl.t('item-qty-column-template', data)#</td>
        <td>#= tmpl.t('item-remaining-qty-column-template', data)#</td>
        <td>#= tmpl.t('item-currentprice-column-template', data)#</td>
        @if (Model.Market == MarketType.Amazon || Model.Market == MarketType.AmazonEU || Model.Market == MarketType.AmazonAU || Model.Market == MarketType.AmazonIN)
        {
            <td>#= tmpl.t('item-lowestprice-column-template', data) #</td>
        }
        <td>#= tmpl.t('item-style-column-template', data)#</td>
        @if (AccessManager.CanEditProduct())
        {
            <td>
                <a href='javascript: void(0)' class='k-button' onclick='productVm.editItem(this, "#=data.ItemId#", "#=data.SKU#")'><span class='glyphicon glyphicon-pencil am-icon'></span>Edit</a>
            </td>
        }
    </tr>
</script>


@Html.Partial(MVC.Shared.Views._TemplatesProduct)
@Html.Partial("_TemplateGridPager")
@Html.Partial("_TemplateFastGrid")

<script id="item-action-column-template" type="text/kendo-tmpl">
    #if (ASIN) {#
    #if (Market == '@((int)MarketType.Magento)'
    || Market == '@((int)MarketType.eBay)'
    || Market == '@((int)MarketType.Walmart)'
    || Market == '@((int)MarketType.WalmartCA)'
    || Market == '@((int)MarketType.Shopify)'
    || Market == '@((int)MarketType.Groupon)'
    || Market == '@((int)MarketType.OverStock)'
    || Market == '@((int)MarketType.Jet)'
    || Market == '@((int)MarketType.AmazonAU)'
    || Market == '@((int)MarketType.AmazonIN)'
    || Market == '@((int)MarketType.AmazonEU)'
    || (Market == '@((int)MarketType.Amazon)' && MarketplaceId == '@(MarketplaceKeeper.AmazonComMarketplaceId)')) {#
    <a href='javascript: void(0)' class='k-button' style='display:block;' onclick='productVm.editProduct(this, "#=Id#")'><span class='glyphicon glyphicon-pencil am-icon'></span>Variations</a>

    @if (AccessManager.CanEditSystemInfo())
    {
        <a href='javascript: void(0)' class='k-button' style='display:block;' onclick='productVm.cloneProduct(this, "#=Id#")'><span class='glyphicon glyphicon-export am-icon'></span>Clone</a>
    }
    <a href='javascript: void(0)' class='k-button' style='display:block;' onclick='productVm.copyProduct(this, "#=Id#")'><span class='glyphicon glyphicon-export am-icon'></span>Copy</a>
    <a href='javascript: void(0)' class='k-button' style='display:block; margin-top: 4px' onclick='productVm.deleteProduct(this, "#=Id#")'><span class='glyphicon glyphicon-remove-sign am-icon'></span>Remove</a>
    #}#
    #if (Market == '@((int)MarketType.Amazon)'
    || Market == '@((int)MarketType.AmazonEU)'
    || Market == '@((int)MarketType.AmazonAU)'
    || Market == '@((int)MarketType.AmazonIN)') {#
    <div style='margin-top:4px'>
        <a href='javascript: void(0)' class='k-button' style="min-width: 44px;  margin: 4px 0px 0px 0px" onclick='productVm.editParent(this, "#=Id#")'><span class='glyphicon glyphicon-pencil am-icon'></span>Edit</a>
        <a href='javascript: void(0)' class='k-button' style="margin-left: 4px; min-width: 12px; margin: 4px 0px 0px 0px" onclick='productVm.exportProduct(this, "#=Id#")'><img src="/Images/excel.png" width="20" /></a>
    </div>
    <div>
        <a href='javascript: void(0)' class='k-button' style='min-width: 70px; margin: 4px 0px 0px 0px' onclick='productVm.showSales(this, "#=ASIN#")'><span class='glyphicon glyphicon-stats am-icon'></span>Sales</a>
    </div>
    #}#
    #} else {#
    <span></span>
    #}#

    #if (Market == '@((int)MarketType.Amazon)') {#
        #if (PublishRequestedDate == null) {#
            <div style='margin-top: 4px'>
                <a href='javascript: void(0)' class='k-button' style='display:block;' onclick='productVm.sendProductUpdate(this, "#=Id#")'><span class='glyphicon glyphicon-export am-icon'></span>Publish</a>
            </div>
        #} else {#
            <span class="label label-info">Publish Requested</span>
        #}#
    #}#
</script>


<script>
    var productVm = null;

    $(document).ready(function() {

        var settings = {
            gridId: 'Products',
            markets: marketUtils.getAllMarkets(),
            marketplaceIds: marketUtils.getAllMarketplaceIds(),

            availabilities: {
                inStock: @((int)ProductAvailability.InStock),
                all: @((int)ProductAvailability.All),
            },

            onHoldModes: {
                none: @((int)OnHoldModes.None),
                onListing: @((int)OnHoldModes.OnListing),
                onStyle: @((int)OnHoldModes.OnStyle),
                onBoth: @((int)OnHoldModes.OnBoth),
                onListingOrStyle: @((int)OnHoldModes.OnListingOrStyle),
                onListingWithActiveStyle: @((int)OnHoldModes.OnListingWithActiveStyle),
            },

            listingsModes: {
                onlyFBA: @((int) ListingsModeType.OnlyFBA),
                withoutFBA: @((int) ListingsModeType.WithoutFBA),
                all: @((int) ListingsModeType.All),
            },

            publishedStatuses: {
                publishingErrors: @((int)PublishedStatuses.PublishingErrors),
            },

            canEdit: @(AccessManager.CanEditProduct() ? 1 : 0),

            urls: {
                updateParent: '@Url.Action(MVC.Item.OnUpdateParent())',
                updateItem: '@Url.Action(MVC.ChildItem.OnUpdateItem())',
                checkForUpdate: '@Url.Action(MVC.Item.CheckForUpdate())',
                requestUpdate: '@Url.Action(MVC.Item.RequestUpdate())',
                pauseUpdate: '@Url.Action(MVC.Item.PauseUpdate())',
                salesPopup: '@Url.Action(MVC.Item.SalesPopupByASIN())',

                addProduct: '@Url.Action("OnCreate", "ItemEdit")',
                editProduct: '@Url.Action("OnEdit", "ItemEdit")',
                cloneProduct: '@Url.Action("Clone", "ItemEdit")',
                copyProduct: '@Url.Action("OnCopy", "ItemEdit")',
                deleteProduct: '@Url.Action("Delete", "ItemEdit")',
                lookupBarcode: '@Url.Action("OnRequestBarcode", "MarketBarcode")',
                sendProductUpdate: '@Url.Action("SendProductUpdate", "ItemEdit")',

                exportProduct: '@Url.Action("OnExport", "ItemExport")',

                getParentItems: '@Url.Action("GetAllParents", "Item")',
                getChildItems: '@Url.Action("GetChildren", "ChildItem")',
                getIdListByFilters: '@Url.Action("GetIdListByFilters", "Item")',

                getStyleIdList: '@Url.Action("GetStyleIdList", "AutoComplete")',

                exportToExcelUS: '@Url.Action(MVC.Item.ExportToExcelUS())',
                exportToExcelCA: '@Url.Action(MVC.Item.ExportToExcelCA())',
                exportToExcelUK: '@Url.Action(MVC.Item.ExportToExcelUK())',
                exportReturnExemptions: '@Url.Action(MVC.Item.ExportReturnExemptions())',
            }
        };

        console.log(settings);

        var model = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
        console.log(model);

        model.listingsModeList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ProductSearchFilterViewModel.FBAListingsModeList));
        model.availabilityList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ProductSearchFilterViewModel.AvailabilityList));
        model.noneSoldPeriodList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ProductSearchFilterViewModel.SellingHistoryList));
        model.genderList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.GenderList));
        model.mainLicenseList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MainLicenseList));
        model.allSubLicenseList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SubLicenseList));
        model.allSizesArray = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SizeList));
        model.onHoldModeList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(OptionsHelper.OnHoldModeList));
        model.publishedStatusList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.PublishedStatusList));
        model.selectedParentASIN = '@Model.ParentASIN';

        productVm = new ProductViewModel(model, settings);

        ko.validation.init({
            errorElementClass: "input-validation-error",
            errorMessageClass: "field-validation-error",
            decorateElement: true,
            decorateInputElement: true,
            decorateElementOnModified: true
        });
        ko.applyBindings(productVm, document.getElementById('page-content'));
    });
</script>