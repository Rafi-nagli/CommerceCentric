@using Amazon.Common.Helpers
@using Amazon.Core.Entities.Enums
@using Amazon.Core.Models
@using Amazon.Web.Models
@using Amazon.Web.ViewModels.Feeds
@using Amazon.Web.ViewModels.Inventory
@using Amazon.Web.ViewModels.Messages
@using Amazon.Web.ViewModels.ScanOrders
@using Amazon.Web.ViewModels.InventoryGroup
@using Amazon.Web.ViewModels.Vendors
@using Kendo.Mvc.UI
@model Amazon.Web.ViewModels.InventoryGroup.InventoryGroupFilterViewModel
@{
    ViewBag.Title = "Inventory Groups";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Icon
{
    <link rel="shortcut icon" href="/Content/Images/inventory.ico" />
}

<style>
    .k-grid tbody a.k-button {
        min-width: 78px;
    }
</style>
<style>
    #InventoryGroupList .k-grid-content, .k-grid tr td {
        overflow: visible;
    }

    #InventoryGroupList .k-grid-header {
        padding-right: 0 !important;
    }
</style>

<script src="~/Scripts/knockout-kendo.min.js" type="text/javascript"></script>


<script>
    var InventoryGroupListModel = function (model, settings) {
        var self = this;
        ko.BaseViewModel.call(self);

        //Init
        self.model = model;
        self.settings = settings;

        self.gridId = self.settings.gridId;
        self.gridNode = $(self.gridId);
        self.grid = self.gridNode.data("kendoGrid");


        //Params
        self.minDate = new Date(2000, 1, 1);
        self.maxDate = new Date();
        self.maxDate.setHours(23);
        self.maxDate.setMinutes(59);

        self.dateFrom = ko.observable('');
        self.dateTo = ko.observable('');

        self.addInventoryGroup = function() {
            console.log("addInventoryGroup");

            var settings = {
                urls: {
                    addGroup: '@Url.Action("AddGroup", "InventoryGroup")',
                    submit: '@Url.Action("Submit", "InventoryGroup")',
                },
                submitCallback: function() { self.search(); }
            };
            var popupModel = new InventoryGroupModel(null,
                settings);
            popupModel.show();

            //popupWindow.initAndOpen(self.settings.urls.addSaleFeed, "Upload Sales", 600);
        };

        self.showManagePrice = function (id) {
            console.log("showManagePrice, id=" + id);

            var model = {
                id: id
            };
            var settings = {
                urls: {
                    submit: '@Url.Action("UpdatePrice", "InventoryGroup")',
                },
                marketList: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(OptionsHelper.MarketList)),
                submitCallback: function() { self.search(); }
            };
            var popupModel = new ManageGroupPriceModel(model,
                settings);
            popupModel.show();

            //popupWindow.initAndOpen(self.settings.urls.addSaleFeed, "Upload Sales", 600);
        };

        self.deleteGroup = function (sender, id) {
            console.log("deleteGroup, id=" + id);
            if (confirm('Are you sure you want to delete this group?')) {
                $.ajax({
                    url: self.settings.urls.deleteGroup,
                    data: JSON.stringify({ id: id }),
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8',
                    type: 'POST',
                    async: false,
                    success: function () {
                        console.log("inventory group was deleted successfully, id=" + id);
                        self.search()
                    }
                });
            }
        }

        //Search
        self.search = function () {
            var params = self.getGridParams();

            self.resetRowNumber(0);

            if (self.grid.dataSource.page() != 1) {
                self.grid.dataSource.page(1); //May call read
            }
            self.grid.dataSource.read(params);
        };

        self.searchByKeyCmd = function (data, event) {
            if (event.keyCode == 13)
                self.search(true);
            return true;
        };

        self.getGridParams = function () {
            console.log("getGridParams");

            var from = kendo.toString(self.dateFrom(), 'MM/dd/yyyy');
            var to = kendo.toString(self.dateTo(), 'MM/dd/yyyy');
            //var type = self.typeValue();

            return {
                DateFrom: from,
                DateTo: to,
                //Type: type
            };
        };

        self.clear = function () {
            self.dateFrom('');
            self.dateTo('');
            //self.typeValue(self.model.Type);
        };

        self.clearAndSearch = function () {
            self.clear();
            self.search(false);
        };

        self.searchByButton = function () {
            self.search(true);
        };


        //Grid
        self.buildActionMenu = function () {
            $(".action-menu").kendoMenu();
            /*{
                dataSource: [{
                    text: "Actions", // TODO how to get the rows first column value here?
                    items: [
                        { text: "Change Price" },
                        { text: "Delete" }
                    ]
                }],
                select: function (e) {
                    var operation = $(e.item).text();
                    // TODO how to get the current row data here?
                    switch (operation) {
                        case "Change Price":

                            break;

                        case "Delete":
                            self.deleteGroup(null, $(this).attr("id"));
                            break;
                    }
                }
            });*/
        }

        self.onDataBound = function (e) {
            console.log("dataBound");
            var start = (self.grid.dataSource.page() - 1) * self.grid.dataSource.pageSize();
            self.resetRowNumber(start);

            self.buildActionMenu();
        };

        helper.ui.addTopPager(self.grid);

        self.search(false);
    };
</script>

<div id="page-content">
    <div id="windowContainer"></div>

    <ol class="breadcrumb">
        <li><a href="#">Inventory</a></li>
        <li class="active">Inventory Groups</li>
    </ol>

    @Html.Partial("_ManagePrice")

    <div class="panel panel-default">
        <div class="filters">
            <table>
                <colgroup>
                    <col style="width: 120px" />
                    <col style="width: 210px" />
                    <col style="width: 70px" />
                    <col style="width: 500px" />
                </colgroup>
                <tr>
                    <th>Date: </th>
                    <td colspan="2">
                        <table>
                            <tr>
                                <td>from</td>
                                <td>
                                    <input class="data-picker" data-bind="kendoDatePicker: { value: dateFrom, format: 'MM/dd/yyyy', min: minDate, max: maxDate }" />
                                </td>
                                <td>to</td>
                                <td>
                                    <input class="data-picker" data-bind="kendoDatePicker: { value: dateTo, format: 'MM/dd/yyyy', min: minDate, max: maxDate }" />
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
                @*<tr>
                        <th>Type:</th>
                        <td>
                            <input style="width:180px"
                                   data-bind="kendoDropDownList: {data: typeList, value: typeValue, dataTextField: 'Text', dataValueField: 'Value', optionLabel: 'All' }" />
                        </td>
                    </tr>*@
            </table>
            <button class="k-button filter-button"
                    data-bind="click: searchByButton">
                <span class='glyphicon glyphicon-search am-icon'></span>Search
            </button>
            <button class="k-button filter-button"
                    data-bind="click: clearAndSearch">
                <span class='glyphicon glyphicon-ban-circle am-icon'></span>Clear
            </button>
        </div>
    </div>

    @*<div class="k-toolbar k-grid-toolbar">
            <a href="#"
               class="k-button k-button-icontext k-grid-add"
               data-bind="click: addInventoryGroup">
                <span class="k-icon k-add"></span>
                Add Group
            </a>
        </div>*@

    <script type="text/x-kendo-template" id="actions-column-template">
        <ul class="action-menu" id="#=data.Id#" style="background: none;">
            <li>
                Actions
                <ul>
                    <li onclick="javascript: inventoryGroupListVm.showManagePrice(#=data.Id#)">Manage Price</li>
                    <li onclick="javascript: inventoryGroupListVm.deleteGroup(this, #=data.Id#)">Delete</li>
                    @*<button class="k-button" onclick="javascript: inventoryGroupListVm.deleteGroup(this, #=data.Id#)">Delete</button>*@

                </ul>
            </li>
        </ul>
    </script>


    @(Html.Kendo().Grid<InventoryGroupViewModel>()
                            .Name("InventoryGroupList")
                            .Editable(e => e.Mode(GridEditMode.PopUp))
                            .Columns(columns =>
                            {
                                columns.Bound(c => c.Id)
                                    .ClientTemplate("#=inventoryGroupListVm.renderNumber(data)#")
                                    .Title("#")
                                    .Width(20)
                                    .Sortable(false);
                                columns.Bound(c => c.Name)
                                    .Title("Group Name");
                                columns.Bound(c => c.StyleCount)
                                .Width(200)
                                .Title("SKUs");
                                columns.Bound(c => c.CreateDate)
                                    .ClientTemplate("#=tmpl.f(FormattedCreateDate, 'MM.dd.yyyy HH:mm')#")
                                    .Width(150)
                                    .Title("Create Date");
                                columns.Bound(c => c.Id)
                                .ClientTemplate("#= tmpl.t('actions-column-template', data)#")
                                .Width(150)
                                .Title("Actions");
                            })
                            .ClientDetailTemplateId("itemsTemplate")
                            .Sortable(conf => conf.Enabled(true).SortMode(GridSortMode.SingleColumn))
                            .Pageable(conf => conf.Enabled(true).Refresh(true))
                            .Filterable(conf => conf.Enabled(true))
                            .AutoBind(false)
                            .Events(e =>
                            {
                                e.DataBound("onDataBound");
                            })
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .ServerOperation(false)
                                .PageSize(50)
                                .Model(conf => conf.Id(m => m.Id))
                                .Sort(conf =>
                                {
                                    conf.Add(n => n.CreateDate).Descending();
                                })
                                .Read(read => read.Action(MVC.InventoryGroup.ActionNames.GetAll, MVC.InventoryGroup.Name)
                                    .Data("GetGridParams"))))

</div>


<script id="itemsTemplate" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<InventoryGroupItemViewModel>()
                      .Name("AttributeValues_#=Id#")
                              .Editable(e => e.Mode(GridEditMode.InLine).DisplayDeleteConfirmation(true)
                              //.CreateAt(GridInsertRowPosition.Bottom)
                              )
                      //.ToolBar(t => t.Create())
                      .Pageable(conf => conf.Enabled(true).Refresh(true))
                      .Columns(c =>
                      {
                          c.Bound(l => l.StyleId).Hidden(true);
                          c.Bound(l => l.StyleString).ClientTemplate("<a href='\\#=StyleUrl\\#' target='_blank'>\\#=StyleString\\#</a>").Width(120);
                          c.Bound(l => l.Name);
                          c.Command(l => l.Destroy()).Width(200);
                      })
                          .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .PageSize(25)
                                                .Model(conf =>
                                                {
                                                    conf.Id(m => m.StyleId);
                                                })
                                                                .Read(read => read.Action("GetChildren", "InventoryGroup", new { Id = "#=Id#" }))

                                                                .Destroy(destroy => destroy.Action("DeleteChild", "InventoryGroup"))
                                                                                //.Create(create => create.Action("AddChild", "Attribute", new { parentId = "#=Id#" }))
                                                                                ).ToClientTemplate()
    )

</script>


<script>
    var inventoryGroupListVm = null;

    function GetGridParams() {
        console.log("GetGridParams");
        if (inventoryGroupListVm != null)
            inventoryGroupListVm.getGridParams();
        return {};
    }

    function onDataBound(e) {
        if (inventoryGroupListVm != null)
            inventoryGroupListVm.onDataBound(e);
    }

    $(document).ready(function() {
        var settings = {
            gridId: "#InventoryGroupList",
            idFieldName: "Id",
            urls: {
                addGroup: '@Url.Action(MVC.InventoryGroup.AddGroup())',
                editGroup: '@Url.Action(MVC.InventoryGroup.EditGroup())',
                deleteGroup: '@Url.Action(MVC.InventoryGroup.DeleteGroup())',
            }
        };
        var model = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

        inventoryGroupListVm = new InventoryGroupListModel(model, settings);

        ko.validation.init({
            errorElementClass: "input-validation-error",
            errorMessageClass: "field-validation-error",
            decorateElement: true,
            decorateInputElement: true,
            decorateElementOnModified: true
        });
        ko.applyBindings(inventoryGroupListVm, document.getElementById('page-content'));
    });

</script>
