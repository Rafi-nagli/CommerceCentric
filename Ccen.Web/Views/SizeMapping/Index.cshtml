@using Amazon.Web.Models

@{
    ViewBag.Title = "Size Mappings";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div id="page-content">
    <ol class="breadcrumb">
        <li><a href="#">System</a></li>
        <li class="active">@ViewBag.Title</li>
    </ol>

    <div>
        <div id="grid"></div>
    </div>
</div>

<script>
    $(document).ready(function() {
        console.log("onready");

        //Custom validation
        //http://demos.telerik.com/kendo-ui/grid/editing-custom-validation

        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("GetAllSizeMappings", "SizeMapping")',
                    //dataType: "json",
                },
                destroy: {
                    url: '@Url.Action("RemoveSizeMapping", "SizeMapping")',
                    dataType: "json",
                    contentType: "application/json",
                    type: "POST"
                },
                update: {
                    url: '@Url.Action("UpdateSizeMapping", "SizeMapping")',
                    dataType: "json",
                    contentType: "application/json",
                    type: "POST"
                },
                create: {
                    url: '@Url.Action("AddSizeMapping", "SizeMapping")',
                    dataType: "json",
                    contentType: "application/json",
                    type: "POST"
                },
                parameterMap: function(options, operation) { //data
                    console.log("parameterMap");
                    console.log(options);
                    if (operation !== "read") { // && options.models
                        //    //if (operation === "update" || operation === "create") {
                        return JSON.stringify({ item: options });
                        //    return {item: kendo.stringify(options.models)};
                    }
                    return options;
                }
            },

            serverPaging: true,
            serverSorting: false,
            serverFiltering: true,
            serverGrouping:true,
            serverAggregates:true,
            type: "aspnetmvc-ajax",

            filter: [],
            //batch: true,
            error: error,

            sort: { field: "StyleSize", dir: "asc" },

            pageSize: 400,
            page: 1,
            total: 0,

            schema: {
                data:"Data",
                total:"Total",
                errors:"Errors",
                model: {
                    id: "Id",
                    fields: {
                        Id: { "editable": false, "type": "number" }, // { editable: false, nullable: true },
                        CreateDate: { "editable": false },
                        UpdateDate: { "editable": false },
                        StyleSize: {  },
                        ItemSize: { validation: { required: true } },
                    }
                }
            }
        });

        $("#grid").kendoGrid({
            dataSource: dataSource,
            pageable: true,
            sortable: {
                mode: "single",
                allowUnsort: false
            },

            toolbar: ["create"],

            columns: [
                { field: "Id", title: "Id", width: '45px', "template": "<span class='gray'>#=Id#</span>" },
                { field: "StyleSize", title: "Style Size", editor: sizeDropDownEditor, encoded: true },
                { field: "ItemSize", title: "Amazon Size" },
                { field: "Priority", title: "Priority" },
                { command: ["edit", "destroy"], title: "&nbsp;", width: "200px" }],
            editable: {
                mode: "inline"
            }
        });
    });


    function sizeDropDownEditor(container, options) {
        var data = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(OptionsHelper.SizeItems));

        $('<input required data-text-field="Text" data-value-field="Value" data-bind="value:' + options.field + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                //autoBind: false,
                dataTextField: "Text",
                dataValueField: "Value",
                //index: data.map(function(e) { return e.Value; }).indexOf(options.model.StyleSize),
                dataSource: data,
                optionLabel: "Select..."
            });
    }
</script>


<script type="text/kendo-template" id="message">
    <div class="k-widget k-tooltip k-tooltip-validation k-invalid-msg field-validation-error" style="margin: 0.5em; display: block; " data-for="#=field#" data-valmsg-for="#=field#" id="#=field#_validationMessage">
        <span class="k-icon k-warning"> </span>#=message#<div class="k-callout k-callout-n"></div>
    </div>
</script>


<script type="text/javascript">
    var validationMessageTmpl = kendo.template($("#message").html());

    function error(args) {
        if (args.errors) {
            var grid = $("#grid").data("kendoGrid");
            grid.one("dataBinding", function (e) {
                e.preventDefault();   // cancel grid rebind if error occurs

                for (var error in args.errors) {
                    console.log("error=" + error);
                    console.log(args.errors);
                    showMessage(grid.editable.element, error, args.errors[error].errors);
                }
            });
        }
    }

    function showMessage(container, name, errors) {
        //add the validation message to the form
        console.log(container);
        var messageBlock = container.find("[data-valmsg-for='" + name + "'],[data-val-msg-for='" + name + "']");
        if (messageBlock.length > 0) {
            console.log(messageBlock);
            messageBlock.replaceWith(validationMessageTmpl({ field: name, message: errors[0] }));
        }
        else {
            console.log('data-container');
            container.find("[data-container-for='" + name + "']").append(validationMessageTmpl({ field: name, message: errors[0] }));
        }
    }
</script>

