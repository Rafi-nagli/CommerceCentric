@using Amazon.Common.Helpers
@using Amazon.Core.Entities.Enums
@using Amazon.Core.Models
@using Amazon.Web.Models
@using Amazon.Web.ViewModels.Inventory
@using Amazon.Web.ViewModels.Messages
@using Amazon.Web.ViewModels.ScanOrders
@using Amazon.Web.ViewModels.Vendors
@using Kendo.Mvc.UI
@model Amazon.Web.Models.SearchFilters.NotificationFilterViewModel
@{
    ViewBag.Title = "Notifications";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Icon
{
    <link rel="shortcut icon" href="/Content/Images/inventory.ico" />
}

<style>
    .k-grid tbody a.k-button {
        min-width: 78px;
    }
</style>

<script src="~/Scripts/knockout-kendo.min.js" type="text/javascript"></script>


<script>
    var NotificationListModel = function (model, settings) {
        var self = this;

        //Init
        self.model = model;
        self.settings = settings;

        self.gridId = self.settings.gridId;
        self.gridNode = $(self.gridId);
        self.grid = self.gridNode.data("kendoGrid");

        ko.BaseViewModel.call(self);
        ko.BaseCheckboxViewModel.call(self, self.gridId, settings.idFieldName);




        //Params
        self.orderNumber = ko.observable(model.OrderNumber);

        self.minDate = new Date(2000, 1, 1);
        self.maxDate = new Date();
        self.maxDate.setHours(23);
        self.maxDate.setMinutes(59);

        self.dateFrom = ko.observable('');
        self.dateTo = ko.observable('');

        self.typeList = ko.observable(model.TypeList);
        self.typeValue = ko.observable(model.Type);
        self.typeValue.subscribe(function () { self.search(); });

        self.includeReaded = ko.observable(self.model.IncludeReaded);
        self.includeReaded.subscribe(function () { self.search(); });

        self.onlyPriority = ko.observable(self.model.OnlyPriority);
        self.onlyPriority.subscribe(function () { self.search(); });

        //Search
        self.search = function () {
            var params = self.getGridParams();

            self.resetRowNumber(0);

            if (self.grid.dataSource.page() != 1) {
                self.grid.dataSource.page(1); //May call read
            }
            self.grid.dataSource.read(params);
        };

        self.orderIdSource = new kendo.data.DataSource({
            type: "aspnetmvc-ajax",
            //minLength: 3,
            transport: {
                read: '@Url.Action("GetOrderIdList", "AutoComplete")',
                parameterMap: function (data, action) {
                    console.log("action=" + action);
                    if (action === "read") {
                        console.log("filter=" + data.filter.filters[0].value);
                        return {
                            filter: data.filter.filters[0].value
                        };
                    } else {
                        return data;
                    }
                }
            },
            pageSize: 20,
            serverPaging: true,
            serverFiltering: true
        });

        self.searchByKeyCmd = function (data, event) {
            if (event.keyCode == 13)
                self.search(true);
            return true;
        };

        self.getGridParams = function () {
            console.log("getGridParams");

            var includeReaded = self.includeReaded();
            var onlyPriority = self.onlyPriority();
            var from = kendo.toString(self.dateFrom(), 'MM/dd/yyyy');
            var to = kendo.toString(self.dateTo(), 'MM/dd/yyyy');
            var orderNumber = self.orderNumber();
            var type = self.typeValue();

            return {
                IncludeReaded: includeReaded,
                OnlyPriority: onlyPriority,
                DateFrom: from,
                DateTo: to,
                OrderNumber: orderNumber,
                Type: type
            };
        };

        self.clear = function () {
            self.includeReaded(self.model.IncludeReaded);
            self.onlyPriority(self.model.OnlyPriority);
            self.dateFrom('');
            self.dateTo('');
            self.orderNumber('');
            self.typeValue(null);
        };

        self.clearAndSearch = function () {
            self.clear();
            self.search(false);
        };

        self.searchByButton = function () {
            self.search(true);
        };


        //Grid

        self.grid.bind("dataBound", function (e) {
            self.resetRowNumber();
            self.rowTotal(self.grid.dataSource.total());
        });


        //Checkbox logic
        self.markAsReadAsync = function(idList, forAll, readStatus) {
            var defer = $.Deferred();

            $.ajax({
                url: '@Url.Action("MarkAsRead", "Notification")',
                traditional: true,
                data: {
                    IdList: idList,
                    ForAll: forAll,
                    ReadStatus: readStatus,
                },
                success: function(result) {
                    if (result.IsSuccess) {
                        defer.resolve(result.Data);
                    } else {
                        defer.reject();
                    }
                }
            });

            return defer;
        }

        self.markSelectedAsRead = function(m, e) {
            var sender = $(e.target);
            var idList = self.getAllChecked();

            self.markSelectedAs(sender, idList, true);
        }

        self.markSelectedAsUnRead = function(m, e) {
            var sender = $(e.target);
            var idList = self.getAllChecked();

            self.markSelectedAs(sender, idList, false);
        };

        self.markAllAsRead = function(m, e) {
            var sender = $(e.target);
            
            self.markAllAs(sender, true);
        };

        self.markSelectedAs = function(sender, idList, isRead) {
            if (idList.length == 0) {
                Message.error("No selected notifications");
                return;
            }

            helper.ui.showLoading(sender, 'updating...');

            self.markAsReadAsync(idList, false, isRead).done(function() {
                self.updateReadStatus(idList, false, isRead);
                helper.ui.hideLoading(sender);
            });
        }

        self.markAllAs = function(sender, isRead) {
            helper.ui.showLoading(sender, 'updating...');

            var idList = [];
            self.markAsReadAsync(idList, true, isRead).done(function() {
                self.updateReadStatus(idList, true, isRead);
                helper.ui.hideLoading(sender);
            });
        }
        
        self.markAsRead = function(sender, id, isRead) {
            sender = $(sender);
            var idList = [id];
            console.log(isRead == false ? true : false);
            self.markSelectedAs(sender, idList, isRead == false ? true : false);
        }


        self.updateReadStatus = function(idList, forAll, readStatus) {
            var gridData = self.grid.dataSource.data();
            console.log(idList);
            console.log(readStatus);

            $.each(gridData, function(i, row) {
                console.log(row.Id);
                if (idList.indexOf(row.Id) >= 0 || forAll) {
                    console.log("update row=" + row.Id + ", readStatus=" + readStatus);
                    row.IsRead = readStatus;
                    row.ReadDate = new Date();

                    helper.ui.kendoFastRedrawRow(self.grid, row, $('tr[data-uid="' + row.uid + '"]'), null, 0);
                }
            });
        }


        helper.ui.addTopPager(self.grid);

        self.search(false);
    };
</script>

<div id="page-content">
    <ol class="breadcrumb">
        <li><a href="#">System</a></li>
        <li class="active">@ViewBag.Title</li>
    </ol>

    <div class="panel panel-default">
        <div class="filters">
            <table>
                <colgroup>
                    <col style="width: 120px" />
                    <col style="width: 210px"/>
                    <col style="width: 70px" />
                    <col style="width: 500px" />
                </colgroup>
                <tr>
                    <th>Record / Order #:</th>
                    <td>
                        <input type="text"
                               style="width: 200px"
                               data-bind="kendoAutoComplete: {
                                   value: orderNumber,
                                   data: {},
                                   minLenght: 3,
                                   dataSource: orderIdSource },
                                valueUpdate: 'afterkeydown',
                                event: { keypress: searchByKeyCmd }"
                               class="k-textbox"/>
                    </td>
                    <th>Date: </th>
                    <td colspan="2">
                        <table>
                            <tr>
                                <td>from</td>
                                <td>
                                    <input class="data-picker" data-bind="kendoDatePicker: { value: dateFrom, format: 'MM/dd/yyyy', min: minDate, max: maxDate }"/>
                                </td>
                                <td>to</td>
                                <td>
                                    <input class="data-picker" data-bind="kendoDatePicker: { value: dateTo, format: 'MM/dd/yyyy', min: minDate, max: maxDate }"/>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <th>Type:</th>
                    <td>
                        <input style="width:180px"
                               data-bind="kendoDropDownList: {data: typeList, value: typeValue, dataTextField: 'Text', dataValueField: 'Value', optionLabel: 'All' }" />
                    </td>
                    <td colspan="3">
                        <span>
                            <input type="checkbox"
                                   data-bind="checked: includeReaded" /> Show Read
                        </span>
                        <span style="margin-left: 15px">
                            <input type="checkbox"
                                   data-bind="checked: onlyPriority" /> Only Priority
                        </span>
                    </td>
                </tr>
            </table>
            <button class="k-button filter-button"
                    data-bind="click: searchByButton">
                <span class='glyphicon glyphicon-search am-icon'></span>Search
            </button>
            <button class="k-button filter-button"
                    data-bind="click: clearAndSearch">
                <span class='glyphicon glyphicon-ban-circle am-icon'></span>Clear
            </button>
        </div>
    </div>



    <div id="commands" class="k-toolbar k-grid-toolbar">
        <span class="toolbar-label">
            <span>Checked:</span>
            <span data-bind="text: checkedCount" class="count">0</span>
        </span>

        <a href="javascript:;"
           class="k-button toolbar-button"
           data-bind="click: markSelectedAsRead">
            Mark as read
        </a>
        <a href="javascript:;"
           data-bind="click: markSelectedAsUnRead"
           class="k-button toolbar-button">
            Mark as unread
        </a>

        @*<a href="javascript:;"
           data-bind="click: markAllAsRead"
           style="margin-left: 40px"
           class="k-button toolbar-button">
            Mark All as read
        </a>*@
    </div>

    @(Html.Kendo().Grid<NotificationViewModel>()
          .Name("NotificationList")
          .Editable(e => e.Mode(GridEditMode.PopUp))
          .Columns(columns =>
          {
              columns.Bound(c => c.Id)
                  .Encoded(false)
                  .Title(@"<input type='checkbox' id='checkAll' onclick='javascript: notificationListVm.checkAll(this)'></input>")
                  .ClientTemplate("<input type='checkbox' onclick='javascript: notificationListVm.checkOne(this, #=Id#)'/>")
                  .Width(20)
                  .Sortable(false);
              columns.Bound(c => c.Id)
                  .ClientTemplate("<span class='row-number'></span>")
                  .Title("#")
                  .Width(20)
                  .Sortable(false);
              columns.Bound(c => c.Type)
                .Width(150)
                .ClientTemplate("#=TypeAsString#")
                .Title("Type");
              columns.Bound(c => c.RelatedEntityId)
                  .ClientTemplate("<a target='_blank' href='#=RelatedEntityUrl#'>#=RelatedEntityId#</a><div class='gray'>#=RecordIdDetails#</span>")
                  .Title("Record");
              columns.Bound(c => c.Message)
                  .HtmlAttributes(new { style="font-size: 90%"})
                  .ClientTemplate("#=FormattedMessage#")
                  .Title("Details")
                  .Encoded(false);
              columns.Bound(c => c.EntityDate)
                  .Format("{0:" + DateHelper.DateTimeFormat + "}")
                  .Width(150)
                  .Title("Entity/Order Date");
              columns.Bound(c => c.CreateDate)
                  .Format("{0:" + DateHelper.DateTimeFormat + "}")
                  .Width(150)
                  .Title("Create Date");
              columns.Bound(c => c.IsRead)
                  .ClientTemplate("#=(IsRead ? 'Read' : 'Unread') #")
                  .Title("Status")
                  .Width(140);
              columns.Bound(c => c.Id)
                  .ClientTemplate("#= tmpl.t('actions-column-template', data)#")
                  .Title("Actions")
                  .Width(150);
          })
          .Sortable(conf => conf.Enabled(true).SortMode(GridSortMode.SingleColumn))
          .Pageable(conf => conf.Enabled(true).Refresh(true))
          .Filterable(conf => conf.Enabled(true))
          .AutoBind(false)
          .DataSource(dataSource => dataSource
              .Ajax()
              .ServerOperation(false)
              .PageSize(50)
              .Model(conf => conf.Id(m => m.Id))
              .Sort(conf => {
                  conf.Add(n => n.Type).Ascending();
                  conf.Add(n => n.EntityDate).Descending();
                  conf.Add(n => n.CreateDate).Descending();
              })
              .Read(read => read.Action(MVC.Notification.ActionNames.GetAll, MVC.Notification.Name)
                  .Data("GetGridParams"))))

</div>

<script type="text/kendo-tmpl" id="actions-column-template">
    <a class='k-button k-button-icontext read-button' href="javascript:;" onclick="notificationListVm.markAsRead(this, #=Id#, #=IsRead#)">#=(IsRead ? 'Mark As Unread' : 'Mark As Read')#</a>
</script>

<script>
    var notificationListVm = null;

    function GetGridParams() {
        console.log("GetGridParams");
        if (notificationListVm != null)
            return notificationListVm.getGridParams();
        return {};
    }

    $(document).ready(function() {
        var settings = {
            gridId: "#NotificationList",
            idFieldName: "Id"
        };
        var model = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

        notificationListVm = new NotificationListModel(model, settings);

        ko.validation.init({
            errorElementClass: "input-validation-error",
            errorMessageClass: "field-validation-error",
            decorateElement: true,
            decorateInputElement: true,
            decorateElementOnModified: true
        });
        ko.applyBindings(notificationListVm, document.getElementById('page-content'));
    });

</script>
