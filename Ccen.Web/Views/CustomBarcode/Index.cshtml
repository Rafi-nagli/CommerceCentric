@using Amazon.Core.Models
@using Amazon.Web.Models
@using Amazon.Web.Models.SearchFilters
@using Amazon.Web.ViewModels
@using Amazon.Web.ViewModels.CustomBarcodes
@using Kendo.Mvc.UI

@{
    ViewBag.Title = "Barcode-SKU List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<script src="~/Scripts/knockout-kendo.min.js" type="text/javascript"></script>
<script type="text/javascript">

    var CustomBarcodeListModel = function(gridId, model, settings) {
        var self = this;
        ko.BaseViewModel.call(self);

        self.settings = settings;
        self.model = model;

        //Search
        self.filter = {
            barcode: ko.observable(''),
            sku: ko.observable('')
        };
        
        //Grid
        self.gridId = gridId;
        self.gridNode = $(gridId);
        self.grid = $(gridId).data("kendoGrid");

        self.onRequestBarcode = function(id) {
            console.log("onRequestBarcodes, id=" + id);
            popupWindow.initAndOpenWithSettings(
                {
                    content: '@Url.Action(MVC.CustomBarcode.OnRequestBarcode())',
                    title: "Request Barcodes",
                    width: 500,
                    customAction: self.onPopupCustomAction,
                    closeSuccess: self.onPopupCloseSuccess,
                });
        }; 

        self.onDeleteSKU = function(sender, id) {
            if (confirm('Are you sure you want to delete this SKU association?')) {
                helper.ui.showLoading(sender, "deleting...");
                $.ajax({
                    url: '@Url.Action(MVC.CustomBarcode.RemoveAttachedSKU())',
                    data: { id: id },
                    success: function() {
                        helper.ui.hideLoading(sender);
                        self.search();
                    }
                });
            }
        };

        self.hasNewAssosiations = ko.observable(false);

        self.onPopupCustomAction = function(action, data) {
            self.hasNewAssosiations(true);
            //if (action == 'toggleHold') {
            //    if (data.onHold)
            //        self.onHoldOrdersCount(self.onHoldOrdersCount() + 1);
            //    else
            //        self.onHoldOrdersCount(self.onHoldOrdersCount() - 1);
            //}
            //if (action == "dismissAddressValidationError") {
            //    self.RemoveInvalidAddressFor(data.id);
            //}
        };

        self.onPopupCloseSuccess = function() {
            if (self.hasNewAssosiations())
            {
                self.search();
                self.hasNewAssosiations(false);
            }
        }

        //Search

        self.search = function () {
            console.log("search");
            var params = self.getGridParams();

            self.resetRowNumber(0);

            if (self.grid.dataSource.page() != 1) {
                self.grid.dataSource.page(1); //May call read
            }
            self.grid.dataSource.read(params);
        };

        self.searchByKeyCmd = function (data, event) {
            if (event.keyCode == 13)
                self.search(true);
            return true;
        };

        self.getGridParams = function () {
            console.log("getGridParams");

            var sku = self.filter.sku();
            var barcode = self.filter.barcode();

            var params = {
                sku: sku,
                barcode: barcode,
            };
            console.log(params);
            return params;
        };

        self.clear = function () {
            self.filter.barcode('');
            self.filter.sku('');
        };

        self.clearAndSearch = function () {
            self.clear();
            self.search();
        };

        self.searchByButton = function () {
            self.search();
        };

        helper.ui.addTopPager(self.grid);

        self.search();
    };

</script>

<div id="page-content">
    
    <div class="info-panel" style="padding-bottom: 10px">
        <ol class="breadcrumb">
            <li><a href="#">Reports</a></li>
            <li class="active">@ViewBag.Title</li>
        </ol>

        <div class="panel panel-default">
            <div class="filters">
                <table>
                    <colgroup>
                        <col style="width: 100px"/>
                        <col style="width: 210px"/>
                        <col style="width: 100px"/>
                        <col style="width: 210px"/>
                    </colgroup>
                    <tr>
                        <th>SKU:</th>
                        <td>
                            <input type="text" data-bind="value: filter.sku, valueUpdate: 'afterkeydown', event: { keypress: searchByKeyCmd }" class="k-textbox"/>
                        </td>
                        <th>Barcode:</th>
                        <td>
                            <input type="text" data-bind="value: filter.barcode, valueUpdate: 'afterkeydown', event: { keypress: searchByKeyCmd }" class="k-textbox"/>
                        </td>
                    </tr>
                </table>
                <button class="k-button"
                        style="margin: 5px 10px 0px 0px; padding: 3px 20px 3px 20px"
                        data-bind="click: searchByButton">
                    <span class='glyphicon glyphicon-search am-icon'></span>Search
                </button>
                <button class="k-button"
                        style="margin: 5px 10px 0px 0px; padding: 3px 20px 3px 20px"
                        data-bind="click: clearAndSearch">
                    <span class='glyphicon glyphicon-ban-circle am-icon'></span>Clear
                </button>
            </div>
        </div>
    </div>

    @if (AccessManager.IsAdmin)
    {
        <div id="commands" class="k-toolbar k-grid-toolbar k-grid-top">
            <button class="k-button" data-bind="click: onRequestBarcode"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span> Request barcodes</button>
        </div>
    }

    @(Html.Kendo().Grid<CustomBarcodeViewModel>()
          .Name("grid")
          .Columns(columns =>
          {
              columns.Bound(c => c.Id)
                  .Encoded(false)
                  .Title("#")
                  .Width(25);
              columns.Bound(c => c.Barcode).Width(200);
              columns.Bound(c => c.SKU).Width(200);
              columns.Bound(c => c.AttachSKUDate)
                  .Format("{0:ddd, MM.dd.yyyy}")
                  .Width(125);

              if (AccessManager.IsAdmin)
              {
                  columns.Bound(o => o.Id)
                      .ClientTemplate("#= tmpl.t('actions-column-template', data)#")
                      .Title(" ")
                      .Width(160);
              }
          })
          .Pageable(conf => conf.Enabled(true).Refresh(true))
          .AutoBind(false)

          .DataSource(dataSource => dataSource
              .Ajax()
              .Model(conf => conf.Id(m => m.Id))
              .Sort(conf => conf.Add(o => o.AttachSKUDate).Descending())
              .PageSize(100)
              .Read(read => read.Action("GetAll", "CustomBarcode").Data("GetGridParams"))))
    
</div>

<script type="text/kendo-tmpl" id="actions-column-template">
    <a class='k-button k-button-icontext' onclick="customBarcodeList.onDeleteSKU(this, '#=Id#')"><span class="k-icon k-delete"></span> Delete</a>
</script>


<script>
    var customBarcodeList = null;

    $(document).ready(function () {
        console.log("begin ready");

        var settings = {};

        var model = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

        customBarcodeList = new CustomBarcodeListModel('#grid', model, settings);
        ko.applyBindings(customBarcodeList, document.getElementById("page-content"));
    });


    function GetGridParams() {
        console.log("GetGridParams");
        if (customBarcodeList != null)
            return customBarcodeList.getGridParams();
        return {};
    }
</script>