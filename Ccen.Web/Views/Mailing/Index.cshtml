@using Amazon.Common.Helpers
@using Amazon.Core.Entities
@using Amazon.Core.Entities.Enums
@using Amazon.Core.Models
@using Amazon.Core.Models.Settings
@using Amazon.DTO
@using Amazon.Web.Models
@using Amazon.Web.ViewModels
@using Kendo.Mvc.UI
@model Amazon.Web.ViewModels.Pages.MailPageViewModel

@{
    ViewBag.Title = "Mailing labels";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Icon
{
    <link rel="shortcut icon" href="/Content/Images/mail.ico" />
}

<style>
    .k-master-row .k-hierarchy-cell .k-icon {
        visibility: hidden;
    }
</style>


<script type="text/javascript">

    var sellerAddressTypes = {
        return: '0',
        pickup: '1',
    };

    var MailingLabelViewModel = function(gridId, model, settings) {
        var self = this;

        self.model = model;
        self.settings = settings;

        self.wasProcessed = ko.observable(false);
        self.isLoading = ko.observable(false);
        self.loadingText = ko.observable("");

        self.isOrderLoading = ko.observable(false);

        self.isInit = ko.observable(false);
        self.printMessages = ko.observableArray([]);

        self.printError = ko.computed(function() {
            var array = $.grep(self.printMessages(), function(n) { return n.IsError; });
            array = $.map(array, function(n) { return n.IsError ? "- " + n.Message : ""; });
            return array.join('<br/>');
        });

        self.printSuccess = ko.computed(function() {
            var array = $.grep(self.printMessages(), function(n) { return n.IsSuccess; });
            array = $.map(array, function(n) { return n.IsSuccess ? "- " + n.Message : ""; });
            return array.join('<br/>');
        });

        self.isExchanged = ko.observable(false);

        self.notIsExchanged = ko.computed(function() {
            return !self.isExchanged();
        });

        self.wasOnceExchanged = ko.observable(false);
        self.marketplaceCode = ko.observable(1);
        self.marketplaceCode.subscribe(function () { self.onChangeMarketplace(); });

        self.sellerAddressType = ko.observable(sellerAddressTypes.return.toString());
        self.sellerAddressType.subscribe(function() { self.onSellerAddressTypeChanged(); });

        self.fromAddressFullName = ko.observable();
        self.fromAddressAddress1 = ko.observable();
        self.fromAddressAddress2 = ko.observable();
        self.fromAddressCity = ko.observable();
        self.fromAddressUSAState = ko.observable();
        self.fromAddressNonUSAState = ko.observable();
        self.fromAddressZip = ko.observable();
        self.fromAddressZipAddon = ko.observable();
        self.fromAddressCountry = ko.observable(self.settings.defaultCountryCode);
        self.fromAddressPhone = ko.observable();
        self.fromAddressEmail = ko.observable();
        self.fromAddressIsCountryUSA = ko.computed(function() {
            return self.fromAddressCountry() == "US";
        });
        self.fromAddressIsCountryNonUSA = ko.computed(function() {
            return self.fromAddressCountry() != "US";
        });
        self.fromAddressMessage = ko.observable("");



        self.toAddressFullName = ko.observable();
        self.toAddressAddress1 = ko.observable();
        self.toAddressAddress2 = ko.observable();
        self.toAddressCity = ko.observable();
        self.toAddressUSAState = ko.observable();
        self.toAddressNonUSAState = ko.observable();
        self.toAddressZip = ko.observable();
        self.toAddressZipAddon = ko.observable();
        self.toAddressCountry = ko.observable(self.settings.defaultCountryCode);
        self.toAddressPhone = ko.observable();
        self.toAddressEmail = ko.observable();
        self.toAddressIsCountryUSA = ko.computed(function() {
            return self.toAddressCountry() == "US";
        });
        self.toAddressIsCountryMX = ko.computed(function () {
            return self.toAddressCountry() == "MX";
        });
        self.toAddressIsCountryNonUSA = ko.computed(function() {
            return self.toAddressCountry() != "US";
        });
        self.toAddressMessage = ko.observable("");

        self.orderItemList = ko.observableArray([]);

        self.orderId = ko.observable(null);
        self.customerOrderId = ko.observable(null);
        self.orderEntityId = ko.observable(null);
        self.market = ko.observable(null);
        self.marketplaceId = ko.observable(null);
        self.orderComment = ko.observable("");
        self.orderStatus = ko.observable("");
        self.isPrime = ko.observable(false);
        self.requireAmazonProvider = ko.observable(false);

        self.weightLb = ko.observable(0)
            .extend(ko.validation.patterns.requredNumber("*"));
        self.weightLb.subscribe(function () { self.updateShippingMethods(); });

        self.weightOz = ko.observable(0)
            .extend(ko.validation.patterns.requredNumber("*"));
        self.weightOz.subscribe(function () { self.updateShippingMethods(); });

        self.packageLength = ko.observable(null);
        self.packageWidth = ko.observable(null);
        self.packageHeight = ko.observable(null);

        self.packageLength.subscribe(function () { self.resetShippingMethods(); });
        self.packageWidth.subscribe(function () { self.resetShippingMethods(); });
        self.packageHeight.subscribe(function () { self.resetShippingMethods(); });

        self.notes = ko.observable();
        self.instructions = ko.observable();

        self.hasMailLabels = ko.observable(false);
        self.hasBatchLabels = ko.observable(false);

        self.totalPrice = ko.observable(0);
        self.totalPriceCurrency = ko.observable();

        self.isInsured = ko.observable(false);
        self.isSignConfirmation = ko.observable(false);
        self.updateAmazon = ko.observable(false);
        self.cancelCurrentOrderLabel = ko.observable(false);
        self.reduceInventory = ko.observable(false);

        self.shippingMethodId = ko.observable()
                .extend(ko.validation.patterns.requred("Required"));
        self.shippingProviderId = ko.observable();

        self.reasonCode = ko.observable()
            .extend(ko.validation.patterns.requred("Required"));

        self.enableUpdateAmazon = ko.computed(function() {
            return self.reasonCode() == self.settings.reasonCodes.replacementLabel
                || self.orderStatus() != '@(OrderStatusEnumEx.Shipped)';
        });

        self.enableSignConfirmation = ko.computed(function() {
            return true;
            //return self.shippingMethodId() != self.settings.shippingMethods.firstClass
            //    && self.shippingMethodId() != self.settings.shippingMethods.amzFirstClass
            //    && self.shippingMethodId() != self.settings.shippingMethods.intlFlat
            //    && self.shippingMethodId() != self.settings.shippingMethods.intlRegular;
        });

        self.enableReduceInventory = ko.computed(function() {
            return self.reasonCode() == self.settings.reasonCodes.replacingLostDamaged
                || self.reasonCode() == self.settings.reasonCodes.exchange
                || self.reasonCode() == self.settings.reasonCodes.other;
        });

        self.enableCancelCurrentOrderLabel = ko.computed(function() {
            return (self.reasonCode() == self.settings.reasonCodes.replacementLabel
                || self.reasonCode() == self.settings.reasonCodes.other)
                && self.shippingProviderId() != self.settings.shippingProviderTypes.fedexOneRate;
        });

        self.enableIsInsured = ko.computed(function() {
            return !(self.shippingMethodId() == self.settings.shippingMethods.dhlExpressWorldWide
                || self.shippingMethodId() == self.settings.shippingMethods.dhlExpressMx
                || self.shippingMethodId() == self.settings.shippingMethods.dynamexPtpSame);
        });

        self.hasOrder = ko.computed(function() {
            return self.orderEntityId() != null;
        });


        self.shippingMethodList = ko.observableArray([]);
        self.shippingProviderList = ko.observableArray(self.settings.shippingProviderList);

        self.supportAmazonProvider = function() {
            console.log("supportAmazonProvider");
            if (self.market() != self.settings.markets.amazon
                && self.market() != self.settings.markets.amazonEU
                && self.market() != self.settings.markets.amazonAU)
                return false;

            if (!(self.fromAddressIsCountryUSA() && self.toAddressIsCountryMX())
                && (!self.toAddressIsCountryUSA() || !self.fromAddressIsCountryUSA()))
                return false;

            if (self.isPrime())
                return true;

            if (self.hasBatchLabels() || self.hasMailLabels())
            {
                return self.reasonCode() == self.settings.reasonCodes.replacementLabel
                    || self.reasonCode() == self.settings.reasonCodes.manualLabel
                    || self.reasonCode() == self.settings.reasonCodes.other;
            }

            return true;
        };

        self.filteredShippingProviderList = ko.computed(function() {
            var isSupportAmazonProvider = self.supportAmazonProvider();
            var reasonCode = self.reasonCode();
            var isPrime = self.isPrime();
            var requireAmazon = self.requireAmazonProvider();
            console.log("filteredShippingProviderList, supportAmazon: " + isSupportAmazonProvider);
            var providerList = $.grep(self.shippingProviderList(), function (n) {
                if (isPrime || requireAmazon) {
                    if (!self.hasBatchLabels() && !self.hasMailLabels())
                        return n.Value == self.settings.shippingProviderTypes.amazon;
                }

                if (isSupportAmazonProvider) {
                    if ((isPrime || requireAmazon)
                        && (self.reasonCode() == self.settings.reasonCodes.manualLabel
                            || self.reasonCode() == null)) {
                        return n.Value == self.settings.shippingProviderTypes.amazon;
                    }

                    if (self.toAddressIsCountryMX() && self.fromAddressIsCountryUSA()) {
                        return n.Value != self.settings.shippingProviderTypes.stamps;
                    } 
                    return true;
                } else {
                    if (self.toAddressIsCountryUSA() && self.fromAddressIsCountryUSA()) {
                        return n.Value == self.settings.shippingProviderTypes.stamps
                            || n.Value == self.settings.shippingProviderTypes.fedexOneRate
                            || n.Value == self.settings.shippingProviderTypes.fedexStandardRate
                            || n.Value == self.settings.shippingProviderTypes.skyPostal;
                    } else {
                        return n.Value != self.settings.shippingProviderTypes.amazon;
                    }
                }
            });
            return providerList;
        });

        self.filteredReasonList = ko.computed(function() {
            var resultList = $.grep(self.settings.reasonList, function(n) {
                if (n.Value == self.settings.reasonCodes.manualLabel) {
                    return self.orderStatus() != self.settings.orderStatuses.shipped;
                }
                if (n.Value == self.settings.reasonCodes.returnLabel) {
                    return self.orderStatus() == self.settings.orderStatuses.shipped;
                }

                return true;
            });
            return resultList;
        });


        self.onReasonCodeChanged = function() {
            console.log("onReasonCodeChanged");
            self.updateAmazon(false);
            self.cancelCurrentOrderLabel(false);
            self.reduceInventory(false);
            self.isSignConfirmation(false);

            if (self.reasonCode() == self.settings.reasonCodes.returnLabel) {
                if (!self.isExchanged())
                    self.exchangeAddress();
            } else {
                if (self.isExchanged())
                    self.exchangeAddress();
            }

            self.shippingProviderId(null);//self.convertToSupportedShipmentProviderId(self.shippingProviderId()));
            self.updateShippingMethods();


            switch (self.reasonCode()) {
                case self.settings.reasonCodes.exchange:
                    self.reduceInventory(true);
                    break;
                case self.settings.reasonCodes.replacementLabel:
                    self.updateAmazon(true);
                    self.cancelCurrentOrderLabel(true);
                    break;
                case self.settings.reasonCodes.replacingLostDamaged:
                    self.reduceInventory(true);
                    break;
                case self.settings.reasonCodes.resendingOrder:
                    //Nothings
                    break;
                case self.settings.reasonCodes.returnLabel:

                    break;
                case self.settings.reasonCodes.manualLabel:
                    self.updateAmazon(true);
                    break;
            }
        };

        self.onShippingMethodChanged = function() {
            if (self.shippingMethodId() == self.settings.shippingMethods.dhlExpressWorldWide
                || self.shippingMethodId() == self.settings.shippingMethods.dynamexPtpSame) {
                self.isInsured(false);
            }
            if (!self.enableSignConfirmation()) {
                self.isSignConfirmation(false);
            }
        };

        self.onSellerAddressTypeChanged = function() {
            if (self.sellerAddressType() == sellerAddressTypes.return) {
                self.setAddressFromModel(self.model.ReturnAddress, !self.isExchanged());
            } else {
                self.setAddressFromModel(self.model.PickupAddress, !self.isExchanged());
            }
        }

        self.updateSellerAddress = function() {
            var addressType = sellerAddressTypes.return;
            if (self.shippingProviderId() == self.settings.shippingProviderTypes.dhl) {
                addressType = sellerAddressTypes.pickup;
            }
            if (self.shippingProviderId() == self.settings.shippingProviderTypes.amazon) {
                if (self.shippingMethodId() == self.settings.shippingMethods.dynamexPtpSame) {
                    addressType = sellerAddressTypes.pickup;
                }
            }
            self.sellerAddressType(addressType);
        }

        self.exchangeAddress = function() {
            console.log("exchange");
            self.isExchanged(!self.isExchanged());
            self.wasOnceExchanged(true);

            exchangeVal(self.fromAddressFullName, self.toAddressFullName);
            exchangeVal(self.fromAddressAddress1, self.toAddressAddress1);
            exchangeVal(self.fromAddressAddress2, self.toAddressAddress2);
            exchangeVal(self.fromAddressCity, self.toAddressCity);
            exchangeVal(self.fromAddressUSAState, self.toAddressUSAState);
            exchangeVal(self.fromAddressNonUSAState, self.toAddressNonUSAState);
            exchangeVal(self.fromAddressZip, self.toAddressZip);
            exchangeVal(self.fromAddressZipAddon, self.toAddressZipAddon);
            exchangeVal(self.fromAddressCountry, self.toAddressCountry);
            exchangeVal(self.fromAddressPhone, self.toAddressPhone);
            exchangeVal(self.fromAddressEmail, self.toAddressEmail);
            exchangeVal(self.fromAddressMessage, self.toAddressMessage);
        };

        self.exchangeVal = function(val1, val2) {
            var val = val1();
            val1(val2());
            val2(val);
        };

        self.searchByKeyCmd = function(data, event) {
            console.log('searchByKeyCmd');
            if (event.keyCode == 13)
                self.search();
            return true;
        };

        self.search = function() {
            Message.clear();

            if (self.isOrderLoading()) {
                console.log("Search skipped, already in progress");
                return;
            }

            console.log("search");

            self.isOrderLoading(true);

            var orderId = self.inputOrderId();
            self.isInit(false);
            self.shippingMethodList.removeAll();

            $.ajax({
                url: '@Url.Action(MVC.Mailing.GetModelByOrderId())',
                data: { orderId: orderId },
                cache: false,
                success: function(result) {
                    self.isOrderLoading(false);

                    if (result.Data == null) {
                        return;
                    }

                    var data = result.Data;

                    self.grid.dataSource.read({ orderId: data.OrderID });
                    if (self.isExchanged()) {
                        self.setAddressFromModel(data.ToAddress, true);
                    } else {
                        self.setAddressFromModel(data.ToAddress, false);
                    }

                    self.marketplaceCode(data.Market == self.settings.markets.eBay ? 2 : 1);

                    self.orderId(data.OrderID);
                    self.customerOrderId(data.CustomerOrderId);
                    self.market(data.Market);
                    self.marketplaceId(data.MarketplaceId);
                    self.orderEntityId(data.OrderEntityId);
                    self.orderStatus(data.OrderStatus);
                    self.weightLb(data.WeightLb);
                    self.weightOz(data.WeightOz);

                    self.packageLength(data.PackageLength);
                    self.packageWidth(data.PackageWidth);
                    self.packageHeight(data.PackageHeight);

                    self.notes(data.Notes);
                    self.instructions(data.Instructions);
                    self.isPrime(data.IsPrime);
                    self.requireAmazonProvider(data.RequireAmazonProvider);

                    self.hasBatchLabels(data.HasBatchLabels);
                    self.hasMailLabels(data.HasMailLabels);

                    self.totalPrice(data.TotalPrice);
                    self.totalPriceCurrency(data.TotalPriceCurrency);

                    //Reset all other options
                    self.reasonCode(null);
                    //console.log("Original ShipmentPorviderId=" + data.ShipmentProviderId);
                    //var shipmentProviderId = self.convertToSupportedShipmentProviderId(data.ShipmentProviderId);
                    //console.log("Supported ShipmentProviderId=" + shipmentProviderId);
                    self.shippingProviderId(null);
                    self.shippingMethodId(null);

                    self.isInsured(data.IsInsured);
                    self.isSignConfirmation(false);
                    self.updateAmazon(false);
                    self.reduceInventory(false);

                    $.each(data.Items, function(i, item) {
                        console.log('item');
                        console.log(item);

                        item.weight = ko.observable(item.Weight);

                        item.sizeList = ko.observableArray([]);
                        item.isSizeListLoaded = ko.observable(false);
                        item.styleItemId = ko.observable(item.StyleItemId);
                        item.styleItemId.subscribe(function() {
                            console.log("styleItemId changed, id=" + item.styleItemId());
                            var styleItem = $.grep(item.sizeList(), function(nItem) { return nItem.Value == item.styleItemId(); });
                            if (styleItem.length > 0) {
                                console.log(styleItem);
                                item.Size = styleItem[0].Text;
                            }

                            if (item.styleItemId() != '' && item.styleItemId() != null) {
                                self.getStyleItemByIdAsync(item.styleItemId()).done(function(data) {
                                    console.log(data);
                                    item.weight(data.Weight);
                                    item.exchangeStyleId(data.StyleId);

                                    self.updateNotes();
                                    self.updateWeight();

                                    //self.updateShippingMethods();
                                });
                            } else {
                                item.weight(0);
                                item.exchangeStyleId(null);

                                self.updateNotes();
                                self.updateWeight();

                                //self.updateShippingMethods();
                            }
                        });


                        item.styleErrorMessage = ko.observable('');
                        item.exchangeStyleId = ko.observable(item.StyleId);
                        item.exchangeStyleString = ko.observable('');
                        item.exchangeStyleStringLoading = ko.observable(false);
                        item.exchangeStyleString.subscribe(function() {
                            console.log("exchangeStyleString.rise");
                            item.styleErrorMessage('');
                            item.exchangeStyleStringLoading(true);
                            $.ajax({
                                url: '@Url.Action("GetStyleSizes", "AutoComplete")',
                                data: { styleString: item.exchangeStyleString(), onlyWithQty: false },
                                cache: false,
                                success: function(data) {
                                    console.log("exchangeStyleString.success");
                                    console.log(data);
                                    item.exchangeStyleStringLoading(false);
                                    if (data.Data != null && data.Data.length > 0) {
                                        item.sizeList(data.Data);
                                        item.isSizeListLoaded(true);

                                        var isContainCurrent = $.grep(data.Data, function(n) { return n.Value == item.styleItemId(); }).length > 0;

                                        if (item.styleItemId() == null || !isContainCurrent)
                                            item.styleItemId(data.Data[0].Value);
                                        else
                                            item.styleItemId.notifySubscribers(); //NOTE: to recalculate the isOutOfStock and init note calculation
                                    } else {
                                        item.styleErrorMessage('StyleId is not found');
                                        item.sizeList([]);
                                        item.styleItemId('');
                                    }
                                }
                            });
                        });
                        item.exchangeStyleString(item.StyleString);

                        item.inputQuantity = ko.observable(item.Quantity);
                        item.inputQuantity.subscribe(function() {
                            self.updateNotes();
                            self.updateWeight();
                        });

                        item.isOutOfStock = ko.computed(function() {
                            if (!item.isSizeListLoaded()) //NOTE: show only when loaded
                                return false;

                            if (item.inputQuantity() <= 0)
                                return false;

                            if ((self.reasonCode() == self.settings.reasonCodes.returnLabel
                                || self.reasonCode() == self.settings.reasonCodes.replacementLabel
                                || self.reasonCode() == self.settings.reasonCodes.resendingOrder
                                || self.reasonCode() == self.settings.reasonCodes.manualLabel)
                                && !self.reduceInventory())
                                return false; //NOTE: skip validation

                            var si = item.sizeList().firstOrDefault(function(n) {
                                return n.Value == item.styleItemId();
                            });
                            if (si == null || si.Tag == 0) {
                                return true;
                            }
                            return false;
                        });

                        //self.getStyleItemByStyleStringAsync(item.StyleId).done(function(data) {
                        //    console.log("retrieved sizeList for style=" + item.StyleId);
                        //    if (data.Data != null && data.Data.length > 0) {
                        //        item.sizeList(data.Data);
                        //    } else {
                        //        item.sizeList([]);
                        //        //item.styleItemId(null);
                        //    }
                        //    item.isSizeListLoaded(true);
                        //    item.styleItemId.notifySubscribers(); //NOTE: to recalculate the isOutOfStock
                        //});
                    });

                    self.orderItemList(data.Items);

                    self.clearPrintResult();

                    self.updateNotes();
                    self.updateWeight();

                    self.isInit(true);
                    self.updateShippingMethods();
                }
            });
        };

        self.convertToSupportedShipmentProviderId = function(providerId) {
            if (!self.supportAmazonProvider()) {
                if (providerId == self.settings.shippingProviderTypes.amazon) {
                    providerId = self.settings.shippingProviderTypes.stamps;
                }
            }

            return providerId;
        };

        self.canGenerate = ko.computed(function() {
            return self.hasOrder()
                && !self.wasProcessed()
                && !self.isLoading()
                && ($.grep(self.orderItemList(), function(n) { return !n.isSizeListLoaded(); }).length == 0)
                && ($.grep(self.orderItemList(), function (n) { return n.inputQuantity() > 0 && n.isOutOfStock(); }).length == 0);
        });

        self.orderIdSource = new kendo.data.DataSource({
            type: "aspnetmvc-ajax",
            //minLength: 3,
            transport: {
                read: '@Url.Action("GetOrderIdList", "AutoComplete")',
                parameterMap: function (data, action) {
                    console.log("action=" + action);
                    if(action === "read") {
                        console.log("filter=" + data.filter.filters[0].value);
                        return {
                            filter: data.filter.filters[0].value
                        };
                    } else {
                        return data;
                    }
                }
            },
            pageSize: 20,
            serverPaging: true,
            serverFiltering: true
        });

        self.isRateLoading = ko.observable(false);
        self.notIsRateLoading = ko.computed(function () {
            return !self.isRateLoading();
        });
        self.getRateMessage = ko.observable("");

        self.resetShippingMethods = function () {
            console.log("resetShippingMethods");

            self.shippingMethodList.removeAll();
            self.shippingMethodId(null);
        }

        self.updateShippingMethods = function() {
            if (!self.isInit())
                return;

            console.log("updateShippingMethods");

            self.shippingMethodList.removeAll();
            self.shippingMethodId(null);

            var dataModel = self.getDataModel();
            if (dataModel.ShipmentProviderId == 0
                || dataModel.ShipmentProviderId == null)
                return;

            self.isRateLoading(true);
            self.getRateMessage("");            

            $.ajax({
                method: "POST",
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                traditional: true,
                async: true,
                cache: false,
                data: JSON.stringify(dataModel),
                url: '@Url.Action(MVC.Mailing.GetShippingOptions())',
                success: function(result) {
                    self.isRateLoading(false);

                    var currentMethodId = self.shippingMethodId();
                    var keepedCurrent = false;

                    if (result.IsSuccess) {
                        self.shippingMethodList.removeAll();
                        var list = result.Data;
                        if (list != null) {
                            for (var i = 0; i < list.length; i++) {
                                var method = list[i];
                                var prefix = method.ProviderPrefix;
                                if (!dataUtils.isEmpty(prefix))
                                    prefix += " ";
                                method.Title = prefix + method.Carrier + ": " + method.Name + ' - ' + (method.Rate == null ? "[none]" : tmpl.f(method.Rate, "$0.00"));
                                self.shippingMethodList.push(method);
                                if (method.Id == currentMethodId)
                                    keepedCurrent = true;
                            }
                        }
                    } else {
                        self.getRateMessage(result.Message);
                    }

                    if (!keepedCurrent && self.shippingMethodId() != null)
                        self.shippingMethodId(null);

                    //When one options auto select it
                    console.log(self.shippingMethodList().length);
                    if (self.shippingMethodList().length == 1)
                        self.shippingMethodId(self.shippingMethodList()[0].Id);
                }
            });
        };

        self.calcRates = function(data, e) {
            self.updateShippingMethods();
        };

        self.setLoading = function(message) {
            if (message != null && message != '') {
                self.isLoading(true);
            } else {
                self.isLoading(false);
            }
            self.loadingText(message);
        }

        self.getStyleItemByStyleStringAsync = function(styleString) {
            return $.ajax({
                url: '@Url.Action("GetStyleSizes", "AutoComplete")',
                data: { styleString: styleString, onlyWithQty: false },
                cache: false,
            });
        };

        self.getStyleItemByIdAsync = function(styleItemId) {
            return $.ajax({
                cache: false,
                data: { styleItemId: styleItemId },
                url: '@Url.Action(MVC.ReturnOrder.GetStyleItemById())'
            });
        };

        self.getNotes = function() {
            var notes = self.customerOrderId() + " ";
            for (var i = 0; i < self.orderItemList().length; i++) {
                var item = self.orderItemList()[i];
                if (item.inputQuantity() > 0)
                    notes += item.exchangeStyleString() + "[" + item.Size + "]" + (item.inputQuantity() > 1 ? "x" + item.inputQuantity() : "");
            }
            return notes;
        };

        self.updateNotes = function() {
            self.notes(self.getNotes());
        };

        self.getWeight = function() {
            var weight = 0;
            for (var i = 0; i < self.orderItemList().length; i++)
                weight += self.orderItemList()[i].weight() * self.orderItemList()[i].inputQuantity();

            weight += 0.75;
            if (weight > 15.97 && weight < 16.99) {
                weight = 15.97;
            }
            var rounded = Math.round(weight);

            return rounded < weight ? rounded : weight;
        };

        self.updateWeight = function() {
            var totalWeight = self.getWeight();
            self.weightLb(Math.floor(totalWeight / 16));
            self.weightOz(dataUtils.roundToTwoPrecision(totalWeight % 16));
        };



        self.checkFromAddress = function(data, e) {
            var sender = $(e.target);
            self.fromAddressMessage("");
            self.validateAddress(sender,
                    self.getAddressModel(true),
                    false)
                .done(function(data) {
                    console.log(data);
                    self.fromAddressMessage(self.getCheckAddressResult(data, false));
                    if (data.Data != null)
                        self.setAddressFromModel(data.Data, true);
                });
        };

        self.checkToAddress = function(data, e) {
            var sender = $(e.target);
            self.toAddressMessage("");
            self.validateAddress(sender,
                    self.getAddressModel(false),
                    false)
                .done(function(data) {
                    console.log(data);
                    self.toAddressMessage(self.getCheckAddressResult(data, false));
                    if (data.Data != null)
                        self.setAddressFromModel(data.Data, false);
                });
        };

        self.getCheckAddressResult = function(data, asPlanText) {
            if (data.IsSuccess) {
                var msg = "- Address successfully verified (by stamps.com)";
                if (asPlanText)
                    return msg;
                return "<span class='label label-success'>" + msg + "</span>";
            } else {
                var msg = "- The address could not be verified (by stamps.com). Details: " + tmpl.isNull(data.Data, '-');
                if (asPlanText)
                    return msg;
                return "<span  class='label label-danger'>" + msg + "</span>";
            }
        };

        self.validateAddress = function(sender, data, onlyCheck) {
            self.setLoading('validating...');

            data.onlyCheck = onlyCheck;
            return $.ajax({
                url: '@Url.Action(MVC.Mailing.CheckAddress())',
                data: data,
                success: function() {
                    self.setLoading(null);
                }
            });
        };

        self.styleIdSource = new kendo.data.DataSource({
            type: "aspnetmvc-ajax",
            //minLength: 3,
            transport: {
                read: '@Url.Action("GetStyleIdList", "AutoComplete")',
                parameterMap: function (data, action) {
                    console.log("action=" + action);
                    if(action === "read") {
                        console.log("filter=" + data.filter.filters[0].value);
                        return {
                            filter: data.filter.filters[0].value
                        };
                    } else {
                        return data;
                    }
                }
            },
            pageSize: 20,
            serverPaging: true,
            serverFiltering: true
        });

        self.clearPrintResult = function() {
            self.printMessages([]);
            self.orderComment("");
            self.wasProcessed(false);
        };

        self.errors = ko.validation.group(self);
        self.isValid = ko.computed(function() {
            return self.errors.length == 0;
        });
        self.onSubmit = function(data, e) {
            console.log(data);
            console.log(e);
            console.log("generateButton click");

            //var validator = $("#form").kendoValidator().data('kendoValidator');

            //http://stackoverflow.com/questions/18872652/how-to-customize-the-error-message-its-placement-in-knockout-validation
            //http://jsfiddle.net/KHFn8/3238/
            if (self.errors().length == 0) { //validator.validate() &&
                console.log("validate true");

                self.generate(data, e);

                return true;
            } else {
                console.log("validate false");
                self.errors.showAllMessages();
                e.preventDefault();
                return false;
            }
        };

        self.getDataModel = function() {
            var itemsDataModel = $.map(self.orderItemList(), function(item) {
                item.StyleString = item.exchangeStyleString();
                item.StyleId = item.exchangeStyleId(),
                item.StyleItemId = item.styleItemId();
                item.Quantity = item.inputQuantity();

                return item;
            });

            itemsDataModel = $.grep(itemsDataModel, function(item) {
                return item.Quantity > 0;
            });

            console.log(itemsDataModel);

            var dataModel = {
                FromAddress: self.getAddressModel(true),
                ToAddress: self.getAddressModel(false),

                OrderId: self.orderId(),
                CustomerOrderId: self.customerOrderId(),
                OrderEntityId: self.orderEntityId(),

                OrderComment: self.orderComment(),
                Notes: self.notes(),
                Instructions: self.instructions(),
                WeightLb: self.weightLb(),
                WeightOz: self.weightOz(),

                PackageLength: self.packageLength(),
                PackageWidth: self.packageWidth(),
                PackageHeight: self.packageHeight(),

                IsAddressSwitched: self.isExchanged(),
                UpdateAmazon: self.enableUpdateAmazon() ? self.updateAmazon() : false,
                CancelCurrentOrderLabel: self.enableCancelCurrentOrderLabel() ? self.cancelCurrentOrderLabel() : false,
                ReduceInventory: self.enableReduceInventory() ? self.reduceInventory() : false,
                IsInsured: self.isInsured(),
                IsSignConfirmation: self.isSignConfirmation(),
                TotalPrice: self.totalPrice(),
                TotalPriceCurrency: self.totalPriceCurrency(),

                MarketplaceCode: self.marketplaceCode(),
                ShippingMethodSelected: self.shippingMethodId(),
                ShipmentProviderId: self.shippingProviderId(),
                ReasonCode: self.reasonCode(),

                Items: itemsDataModel
            };

            return dataModel;
        };

        self.generate = function(data, e) {
            var sender = $(e.target);

            console.log("isExchanged: " + self.isExchanged());

            var dataModel = self.getDataModel();

            var addressToCheck = self.isExchanged() ? dataModel.FromAddress : dataModel.ToAddress;

            self.validateCancelLabel(sender, self.orderEntityId())
            .then(function() {
                return self.validateAddress(sender,
                    addressToCheck,
                    true);
            })
            .then(function(result) {
                var defer = $.Deferred();
                if (result.IsSuccess) {
                    defer.resolve();
                } else {
                    var message = self.getCheckAddressResult(result, false);
                    Message.popupAsync({
                        title: 'Confirm',
                        message: 'Are you sure you want to print label with the following warnings:<br/>' + message,
                        type: Message.YES_NO
                    }).done(function() {
                        defer.resolve();
                    }).fail(function() {
                        defer.reject();
                    });
                }
                return defer;
            })
            .then(function() {
                return self.validateReasonCodeOrderStatus(sender, self.orderStatus(), self.reasonCode());
            })
            .then(function() {
                return self.validateReasonCodePrintTwice(sender, self.orderEntityId(), self.reasonCode());
            })
            .done(function() {
                console.log('print');
                self.printLabel(dataModel, sender);
            })
            .fail(function() {
                console.log('no print');
                self.setLoading('');
            });
        };

        self.validateReasonCodeOrderStatus = function(sender, orderStatus, reasonCode) {
            var defer = $.Deferred();

            self.setLoading('checking reason code...');

            if (reasonCode == self.settings.reasonCodes.returnLabel
                                && orderStatus != self.settings.orderStatuses.shipped) {
                Message.popupAsync({
                    title: 'Confirm',
                    message: 'Are you sure you want to print return label for order with "' + self.orderStatus() + '" status?',
                    type: Message.YES_NO
                }).done(function() {
                    defer.resolve();
                }).fail(function() {
                    defer.reject();
                });
            } else {
                defer.resolve();
            }

            return defer;
        }

        self.validateReasonCodePrintTwice = function(sender, orderId, reasonCode) {
            var defer = $.Deferred();

            self.setLoading('checking reason code...');

            $.ajax({
                url: '@Url.Action(MVC.Mailing.CheckReasonCode())',
                data: {
                    orderId: orderId,
                    reasonCode: reasonCode
                },
                success: function(data) {
                    self.setLoading(null);
                    if (data.IsSuccess) {
                        defer.resolve();
                    } else {
                        Message.popupAsync({
                            title: 'Confirm',
                            message: 'Are you sure you want to print twice in a row labels with the same reason code?',
                            type: Message.YES_NO
                        }).done(function() {
                            defer.resolve();
                        }).fail(function() {
                            defer.reject();
                        });
                    }
                },
                error: function() {
                    defer.reject();
                }
            });

            return defer;
        };

        self.validateCancelLabel = function(sender, orderId) {
            var defer = $.Deferred();

            self.setLoading('checking previous label...');

            if (!self.cancelCurrentOrderLabel() || orderId == 0 || orderId == null) {
                self.setLoading(null);
                console.log("validateCancelLabel, skip checking...");
                defer.resolve();
                return defer;
            }

            console.log("validateCancelLabel, orderId=" + orderId);

            $.ajax({
                url: '@Url.Action(MVC.Mailing.CheckCanceledLabel())',
                data: { orderId: orderId },
                success: function(data) {
                    self.setLoading(null);
                    if (data.IsSuccess) {
                        defer.resolve();
                    } else {
                        Message.popupAsync({
                            title: 'Confirm',
                            message: 'Are you sure you want to cancel label that was issued more than one business day ago. ' + data.Message,
                            type: Message.YES_NO
                        }).done(function() {
                            defer.resolve();
                        }).fail(function() {
                            defer.reject();
                        });
                    }
                },
                error: function() {
                    defer.reject();
                }
            });

            return defer;
        };

        self.printLabel = function(dataModel, sender) {
            self.setLoading('printing...');

            $.ajax({
                method: "POST",
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                traditional: true,
                async: true,
                cache: false,
                data: JSON.stringify(dataModel),

                url: '@Url.Action(MVC.Mailing.Generate())',

                success: function(data) {
                    self.wasProcessed(true);

                    if (data.IsPrinted) {
                        data.Messages.push({
                            IsSuccess: true,
                            Message: "Label has been successfully printed, tracking number: "
                            + "<b>" + data.PrintedTrackingNumber + "</b>"
                            + " <b><a target='_blank' href='" + data.PrintedLabelUrl + "'>download</a></b>"
                        });
                    }

                    self.printMessages(data.Messages);

                    if (data.IsPrinted) {
                        console.log(data.PrintedLabelUrl);
                        var url = data.PrintedLabelUrl;
                        window.open(url, "_blank", "");
                    }
                },
                complete: function(data) {
                    self.setLoading(null);
                },
            });
        };

        self.setAddressFromModel = function(address, toFrom) {
            if (toFrom) {
                self.fromAddressFullName(address.FullName);
                self.fromAddressAddress1(address.Address1);
                self.fromAddressAddress2(address.Address2);
                self.fromAddressCity(address.City);
                self.fromAddressUSAState(address.USAState);
                self.fromAddressNonUSAState(address.NonUSAState);
                self.fromAddressZip(address.Zip);
                self.fromAddressZipAddon(address.ZipAddon);
                self.fromAddressCountry(address.Country);
                self.fromAddressPhone(address.Phone);
                self.fromAddressEmail(address.Email);
                self.fromAddressMessage("");
            } else {
                self.toAddressFullName(address.FullName);
                self.toAddressAddress1(address.Address1);
                self.toAddressAddress2(address.Address2);
                self.toAddressCity(address.City);
                self.toAddressUSAState(address.USAState);
                self.toAddressNonUSAState(address.NonUSAState);
                self.toAddressZip(address.Zip);
                self.toAddressZipAddon(address.ZipAddon);
                self.toAddressCountry(address.Country);
                self.toAddressPhone(address.Phone);
                self.toAddressEmail(address.Email);
                self.toAddressMessage("");
            }
        };

        self.getAddressModel = function(isFrom) {
            if (isFrom) {
                return {
                    FullName: self.fromAddressFullName(),
                    Address1: self.fromAddressAddress1(),
                    Address2: self.fromAddressAddress2(),
                    City: self.fromAddressCity(),
                    USAState: self.fromAddressUSAState(),
                    NonUSAState: self.fromAddressNonUSAState(),
                    Country: self.fromAddressCountry(),
                    Zip: self.fromAddressZip(),
                    ZipAddon: self.fromAddressZipAddon(),
                    Phone: self.fromAddressPhone(),
                    Email: self.fromAddressEmail(),
                    IsCountryUSA: self.fromAddressIsCountryUSA(),
                };
            } else {
                return {
                    FullName: self.toAddressFullName(),
                    Address1: self.toAddressAddress1(),
                    Address2: self.toAddressAddress2(),
                    City: self.toAddressCity(),
                    USAState: self.toAddressUSAState(),
                    NonUSAState: self.toAddressNonUSAState(),
                    Country: self.toAddressCountry(),
                    Zip: self.toAddressZip(),
                    ZipAddon: self.toAddressZipAddon(),
                    Phone: self.toAddressPhone(),
                    Email: self.toAddressEmail(),
                    IsCountryUSA: self.toAddressIsCountryUSA(),
                };
            }
        };



        //URL Computing
        @*http://stackoverflow.com/questions/332872/encode-url-in-javascript*@
        self.getGoogleAddressUrl = function(address) {
            return "https://www.google.com/search?q=" +
                tmpl.joinNotEmpty([
                    tmpl.joinNotEmpty([address.Address1, address.Address2], " "),
                    address.City,
                    address.State,
                    tmpl.joinNotEmpty([address.Zip, address.ZipAddon], " "),
                    address.Country
                ], ", ");
        };

        self.googleSearchFromAddressUrl = ko.computed(function() {
            return self.getGoogleAddressUrl(self.getAddressModel(true));
        });

        self.googleSearchToAddressUrl = ko.computed(function() {
            return self.getGoogleAddressUrl(self.getAddressModel(false));
        });

        self.getMelissaAddressUrl = function(address) {
            return "http://www.melissadata.com/Lookups/AddressVerify.asp?"
                + "name=" + encodeURIComponent(address.FullName)
                + "&company="
                + "&address=" + encodeURIComponent(tmpl.joinNotEmpty([address.Address1, address.Address2], " "))
                + "&city=" + encodeURIComponent(address.City)
                + "&state=" + (address.IsCountryUS ? encodeURIComponent(address.USAState) : encodeURIComponent(address.USAState))
                + "&zip=" + encodeURIComponent(tmpl.joinNotEmpty([address.Zip, address.ZipAddon], "-"));
        };

        self.melissaSearchFromAddressUrl = ko.computed(function() {
            return self.getMelissaAddressUrl(self.getAddressModel(true));
        });

        self.melissaSearchToAddressUrl = ko.computed(function() {
            return self.getMelissaAddressUrl(self.getAddressModel(false));
        });


        self.onDataBound = function() {
            var grid = self.grid;
            var data = grid.dataSource.data();

            //Expand all rows
            grid.expandRow(this.tbody.find("tr.k-master-row"));

            $.each(data, function(i, row) {
                paintOrderRow(row, 4, 10, 3, grid.columns.length);
            });
        };


        self.reasonCode.subscribe(onReasonCodeChanged);
        self.shippingProviderId.subscribe(self.updateShippingMethods);
        self.shippingProviderId.subscribe(self.updateSellerAddress);
        self.shippingMethodId.subscribe(onShippingMethodChanged);
        self.shippingMethodId.subscribe(self.updateSellerAddress);

        self.grid = $(gridId).data("kendoGrid");
        self.grid.bind("dataBound", self.onDataBound);

        console.log(self.model.OrderId);
        self.inputOrderId = ko.observable(self.model.OrderId);
        self.setAddressFromModel(self.model.ReturnAddress, !self.isExchanged());

        if (self.inputOrderId() != "" && self.inputOrderId() != null)
            self.search();
    };

</script>

<div id="page-content">

    <ol class="breadcrumb">
        <li><a href="#">Labels</a></li>
        <li class="active">@ViewBag.Title</li>
    </ol>

    <div class="am-mail">
        <div style="padding: 10px 0px 5px 7px">
            <div id="errorMessage" class="text-danger" data-bind="html: printError"></div>
            <div id="successMessage" class="text-success" data-bind="html: printSuccess"></div>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading">Search</div>
            <div class="panel-body">
                <div class="search-block">
                    <input name="OrderID"
                           id="orderId"
                           type="text"
                           style="width: 250px; border-color: #2d2d2d"
                           class="k-textbox"
                           data-bind="kendoAutoComplete: {
                               value: inputOrderId,
                               data: {},
                               minLenght: 3,
                               highlightFirst:true,
                               dataSource: orderIdSource },
                                    valueUpdate: 'afterkeydown',
                                    event: { keypress: searchByKeyCmd }"
                           placeholder="Order #" />
                    <a class="k-button" href="javascript: ;" data-bind="click: search, disable: isOrderLoading, css: { 'k-state-disabled': isOrderLoading() }">
                        <span class='glyphicon glyphicon-search am-icon'></span>Search
                    </a>

                    <div class="order-grid grid-small">
                        @(Html.Kendo().Grid<OrderViewModel>()
                          .Name("grid")
                          .Columns(columns =>
                          {
                              columns.Bound(c => c.OrderId)
                                  .Sortable(false)
                                  .Width(100)
                                  .ClientTemplate("#= tmpl.t('status-column-template', data)# #= tmpl.t('order-info-column-template', data)#")
                                  .Title("Status");
                              columns.Bound(c => c.PersonName)
                                  .Sortable(false)
                                  .ClientTemplate("#= tmpl.t('orderid-column-template', data)# #= tmpl.t('tracking-column-template', data)# #= tmpl.t('buyer-column-template', data)#")
                                  .Title("Person name / Order details");
                              columns.Bound(c => c.Quantity)
                                  .Sortable(false)
                                  .Title("Qty")
                                  .Width(40);
                              columns.Bound(c => c.ShippingMethodId)
                                  .Sortable(false)
                                  .ClientTemplate("#= tmpl.t('servicetype-column-template', data)#")
                                  .Title("Ship. Service")
                                  .Width(60);
                              columns.Bound(c => c.ShippingCountry)
                                  .Sortable(false)
                                  .Title("Cntry")
                                  .Width(40);
                              columns.Bound(c => c.ItemPrice)
                                  .Width(80)
                                  .ClientTemplate("#= tmpl.t('price-column-template', data)#")
                                  .Sortable(false)
                                  .Title("Price");
                              columns.Bound(c => c.Weight)
                                  .Sortable(false)
                                  .Width(80)
                                  .Title("Weight")
                                  .ClientTemplate("#= tmpl.t('weight-column-template', data)#");
                              columns.Bound(c => c.StampsShippingCost)
                                  .Sortable(false)
                                  .Width(100)
                                  .ClientTemplate("#= tmpl.t('stampscost-column-template', data) #")
                                  .Title("Stamps price");
                              columns.Bound(c => c.OrderDate)
                                  .Sortable(false)
                                  .Format("{0:MM.dd.yyyy HH:mm}")
                                  .Width(95);
                              columns.Bound(c => c.MainTrackingNumber)
                                  .Title("Tracking Number")
                                  .Sortable(false);
                              columns.Bound(c => c.ShippingDate)
                                  .Sortable(false)
                                  .Format("{0:MM.dd.yyyy}")
                                  .Width(95);
                          })
                                //.Events(e => e.DataBound("dataBound"))
                          .ClientDetailTemplateId("itemsTemplate")
                          .Navigatable(conf => conf.Enabled(false))
                          .AutoBind(false)
                          .DataSource(dataSource => dataSource
                              .Ajax()
                              .ServerOperation(false)
                              .Model(conf => conf.Id(m => m.OrderDate))
                              .Read(read => read.Action(MVC.Mailing.ActionNames.GetOrderById, MVC.Mailing.Name)))
                        )
                    </div>
                </div>
            </div>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading">Order Details #<span data-bind="text: orderId"></span></div>
            <div class="panel-body">
                <div class="mailing-info">
                    <div class="lb">
                        <table>
                            <tr>
                                <th>Weight *:</th>
                                <td><input name="WeightLb" type="text" data-bind="value: weightLb" class="k-textbox" /> lb</td>
                                <td><input name="WeightOz" type="text" data-bind="value: weightOz" class="k-textbox" /> oz</td>
                            </tr>
                        </table>
                    </div>

                    <div class="lb">
                        <table>
                            <tr>
                                <th>Package size (LxWxH):</th>
                                <td><input name="PackageLength" type="text" data-bind="value: packageLength" class="k-textbox" /> in</td>
                                <td><input name="PackageWidth" type="text" data-bind="value: packageWidth" class="k-textbox" /> in</td>
                                <td><input name="PackageHeight" type="text" data-bind="value: packageHeight" class="k-textbox" /> in</td>
                            </tr>
                        </table>
                    </div>


                    <div class="order-items"
                         style="padding-bottom: 10px"
                         data-bind="visible: orderItemList().length > 0">
                        <div>
                            <b>Items:</b>
                        </div>
                        <table style="padding-left: 5px;">
                            <tr>
                                <th>Style Id (ASIN)</th>
                                <th>Size/Color</th>
                                <th>Qty</th>
                            </tr>
                            <tbody data-bind="foreach: orderItemList">
                                <tr>
                                    <td>
                                        <input style='width: 180px' class="k-textbox" data-bind="kendoAutoComplete: {
                                                                value: exchangeStyleString,
                                                                data: {},
                                                                minLenght: 3,
                                                                dataSource: styleIdSource }" />
                                        <div><span class="gray">ASIN:</span> <span data-bind="text: ASIN"></span></div>
                                    </td>
                                    <td>
                                        <input style="width: 100px"
                                               data-bind="kendoDropDownList: {data: sizeList, value: styleItemId, dataTextField: 'Text', dataValueField: 'Value' }" />
                                        <div><span class="gray">weight:</span> <span data-bind="text: weight"></span></div>
                                    </td>
                                    <td>
                                        <input data-bind="value: inputQuantity, valueUpdate:'afterkeydown'"
                                               style="width: 40px"
                                               class="k-textbox" />
                                        <span data-bind="visible: isOutOfStock" class="red" style="display: none">Selected size is out of stock</span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div class="address-block">
                        <table>
                            <tr>
                                <td id="from" style="vertical-align: bottom">
                                    <div style="margin: 0px 0px 4px 0px">
                                        <b>From:</b>
                                        <span style="margin-left: 10px; margin-top: 3px" data-bind="visible: notIsExchanged">
                                            <input type="radio" value="0" data-bind="checked: sellerAddressType" /> Default
                                            <input type="radio" value="1" data-bind="checked: sellerAddressType" /> Pickup
                                        </span>
                                    </div>
                                    <table>
                                        <tr>
                                            <th>Full Name</th>
                                            <td>
                                                <input type="text"
                                                       name="FromAddress.FullName"
                                                       class="text-box k-textbox"
                                                       data-bind="value: fromAddressFullName, enable: isExchanged" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Address 1</th>
                                            <td>
                                                <input type="text"
                                                       name="FromAddress.Address1"
                                                       class="text-box k-textbox"
                                                       data-bind="value: fromAddressAddress1, enable: isExchanged" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Address 2</th>
                                            <td>
                                                <input type="text"
                                                       name="FromAddress.Address2"
                                                       class="text-box k-textbox"
                                                       data-bind="value: fromAddressAddress2, enable: isExchanged" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>City</td>
                                            <td>
                                                <input type="text"
                                                       name="FromAddress.City"
                                                       class="text-box k-textbox"
                                                       data-bind="value: fromAddressCity, enable: isExchanged" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>State</th>
                                            <td>
                                                <div data-bind="visible: fromAddressIsCountryNonUSA">
                                                    <input type="text"
                                                           name="FromAddress.NonUSAState"
                                                           class="text-box k-textbox"
                                                           data-bind="value: fromAddressNonUSAState, enable: isExchanged" />
                                                </div>
                                                <div data-bind="visible: fromAddressIsCountryUSA">
                                                    <input name="FromAddress.USAState"
                                                           data-bind="kendoDropDownList: {data: settings.stateList, value: fromAddressUSAState, dataTextField: 'Text', dataValueField: 'Value', optionLabel: 'State...', enabled: isExchanged }" />
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Zip</th>
                                            <td>
                                                <input type="text"
                                                       name="FromAddress.Zip"
                                                       class="text-box k-textbox"
                                                       style="width: 120px"
                                                       data-bind="value: fromAddressZip, enable: isExchanged" />
                                                -
                                                <input type="text"
                                                       name="FromAddress.ZipAddon"
                                                       class="text-box k-textbox"
                                                       style="width: 80px"
                                                       data-bind="value: fromAddressZipAddon, enable: isExchanged" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Country</th>
                                            <td>
                                                <input name="FromAddress.Country"
                                                       data-bind="kendoDropDownList: {data: settings.countryList, value: fromAddressCountry, dataTextField: 'Text', dataValueField: 'Value', optionLabel: 'Country...', enabled: isExchanged }" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Phone</th>
                                            <td>
                                                <input type="text"
                                                       name="FromAddress.Phone"
                                                       class="text-box k-textbox"
                                                       data-bind="value: fromAddressPhone, enable: isExchanged" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Email</th>
                                            <td>
                                                <input type="text"
                                                       name="FromAddress.Email"
                                                       class="text-box k-textbox"
                                                       data-bind="value: fromAddressEmail, enable: isExchanged" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <td colspan="2">
                                                <a data-bind="click: checkFromAddress" style="width: 140px" href="javascript:;" class="k-button">Check Address</a>
                                                <div style="padding-top: 5px">
                                                    <a target="_blank" data-bind="attr: { href: melissaSearchFromAddressUrl }">Address on Melissa</a>
                                                    <a target="_blank" style="margin-left: 15px" data-bind="attr: { href: googleSearchFromAddressUrl }">Address on Google</a>
                                                </div>
                                                <div data-bind="html: fromAddressMessage" style="padding: 2px"></div>
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                                <td id="to" style="vertical-align: bottom; padding-left: 15px">
                                    <div style="margin: 0px 0px 4px 0px">
                                        <b>To:</b>
                                        <span style="margin-left: 10px; margin-top: 3px" data-bind="visible: isExchanged">
                                            <input type="radio" value="0" data-bind="checked: sellerAddressType" /> Default
                                            <input type="radio" value="1" data-bind="checked: sellerAddressType" /> Pickup
                                        </span>
                                    </div>
                                    <table>
                                        <tr>
                                            <th>Full Name</th>
                                            <td>
                                                <input type="text"
                                                       name="ToAddress.FullName"
                                                       class="text-box k-textbox"
                                                       data-bind="value: toAddressFullName, enable: notIsExchanged" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Address 1</th>
                                            <td>
                                                <input type="text"
                                                       name="ToAddress.Address1"
                                                       class="text-box k-textbox"
                                                       data-bind="value: toAddressAddress1, enable: notIsExchanged" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Address 2</th>
                                            <td>
                                                <input type="text"
                                                       name="ToAddress.Address2"
                                                       class="text-box k-textbox"
                                                       data-bind="value: toAddressAddress2, enable: notIsExchanged" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>City</th>
                                            <td>
                                                <input type="text"
                                                       name="ToAddress.City"
                                                       class="text-box k-textbox"
                                                       data-bind="value: toAddressCity, enable: notIsExchanged" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>State</td>
                                            <td>
                                                <div data-bind="visible: toAddressIsCountryNonUSA">
                                                    <input type="text"
                                                           name="ToAddress.NonUSAState"
                                                           class="text-box k-textbox"
                                                           data-bind="value: toAddressNonUSAState, enable: notIsExchanged" />
                                                </div>
                                                <div data-bind="visible: toAddressIsCountryUSA">
                                                    <input name="ToAddress.USAState"
                                                           data-bind="kendoDropDownList: {data: settings.stateList, value: toAddressUSAState, dataTextField: 'Text', dataValueField: 'Value', optionLabel: 'State...', enabled: notIsExchanged }" />
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Zip</th>
                                            <td>
                                                <input type="text"
                                                       name="ToAddress.Zip"
                                                       class="text-box k-textbox"
                                                       style="width: 120px"
                                                       data-bind="value: toAddressZip, enable: notIsExchanged" />
                                                -
                                                <input type="text"
                                                       name="ToAddress.ZipAddon"
                                                       class="text-box k-textbox"
                                                       style="width: 80px"
                                                       data-bind="value: toAddressZipAddon, enable: notIsExchanged" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Country</th>
                                            <td>
                                                <input name="ToAddress.Country"
                                                       data-bind="kendoDropDownList: {data: settings.countryList, value: toAddressCountry, dataTextField: 'Text', dataValueField: 'Value', optionLabel: 'Country...', enabled: notIsExchanged }" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Phone</th>
                                            <td>
                                                <input type="text"
                                                       name="ToAddress.Phone"
                                                       class="text-box k-textbox"
                                                       data-bind="value: toAddressPhone, enable: notIsExchanged" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Email</th>
                                            <td>
                                                <input type="text"
                                                       name="ToAddress.Email"
                                                       class="text-box k-textbox"
                                                       data-bind="value: toAddressEmail, enable: notIsExchanged" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <td colspan="2">
                                                <a data-bind="click: checkToAddress" style="width: 140px" href="javascript:;" class="k-button">Check Address</a>
                                                <div style="padding-top: 5px">
                                                    <a target="_blank" data-bind="attr: { href: melissaSearchToAddressUrl }">Address on Melissa</a>
                                                    <a target="_blank" style="margin-left: 15px" data-bind="attr: { href: googleSearchToAddressUrl }">Address on Google</a>
                                                </div>
                                                <div data-bind="html: toAddressMessage" style="padding: 2px"></div>
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="shipping">
                        <div>
                            <span>Reason *:</span>
                            <input name="ReasonCode"
                                   style="width: 200px"
                                   data-bind="kendoDropDownList: {data: filteredReasonList, value: reasonCode, dataTextField: 'Text', dataValueField: 'Value', optionLabel: 'Reason...' }" />
                            <span class="field-validation-error-inline"
                                  data-bind="validationMessage: reasonCode"></span>
                        </div>
                        <div>
                            <span>Shipping Provider:</span>
                            <div style="padding: 0px">
                                <input name="ShippingMethodSelected"
                                       style="width: 270px;"
                                       data-bind="kendoDropDownList: {data: filteredShippingProviderList, value: shippingProviderId, dataTextField: 'Text', dataValueField: 'Value', optionLabel: 'Select...', enabled: notIsRateLoading }" />
                            </div>
                            <div style="padding: 0px" data-bind="visible: isRateLoading">
                                <span>loading...</span>
                            </div>
                        </div>
                        <div style="padding-top: 0px">
                            <span>Shipping Method *:</span>
                            <table>
                                <tr>
                                    <td style="padding: 0px;">
                                        <input name="ShippingMethodSelected"
                                               style="width: 270px;"
                                               data-bind="kendoDropDownList: {data: shippingMethodList, value: shippingMethodId, dataTextField: 'Title', dataValueField: 'Id', optionLabel: 'Select...' }" />
                                        <div style="padding: 0px">
                                            <span data-bind="visible: isRateLoading">loading...</span>
                                        </div>
                                    </td>
                                    <td style="vertical-align: top; padding: 0px 0px 0px 5px">
                                        <button class="k-button"
                                                data-bind="click: calcRates">
                                            <span class='glyphicon glyphicon-calc am-icon'></span>
                                        </button>
                                    </td>
                                </tr>
                            </table>
                            <div style="padding: 2px" data-bind="text: getRateMessage" class="red"></div>
                            <div style="padding: 2px" class="field-validation-error-inline"
                                 data-bind="validationMessage: shippingMethodId"></div>
                        </div>
                        <div>
                            <span>Note:</span>
                            <input type="text"
                                   name="Notes"
                                   data-bind="value: notes"
                                   class="k-textbox"
                                   style="width: 300px" maxlength="160" />
                        </div>
                        <div>
                            <span style="display:block">Instructions:</span>
                            <textarea type="text"
                                      name="Instructions"
                                      data-bind="value: instructions"
                                      class="k-textbox"
                                      rows="2"
                                      style="width: 350px" maxlength="1000"></textarea>
                        </div>
                        <div>
                            <input type="hidden"
                                   name="TotalPrice"
                                   data-bind="value: totalPrice" />
                            <input type="hidden"
                                   name="TotalPriceCurrency"
                                   data-bind="value: totalPriceCurrency" />
                            <input type="checkbox"
                                   name="IsInsured"
                                   data-bind="checked: isInsured, enable: enableIsInsured" /> <span>Insurance (insured value: <span data-bind="text: totalPriceCurrency"></span><span data-bind="text: totalPrice"></span>)</span>
                        </div>
                        <div>
                            <input type="checkbox"
                                   name="IsSignConfirmation"
                                   data-bind="checked: isSignConfirmation, enable: enableSignConfirmation" /> <span>Signature Confirmation</span>
                        </div>
                        <div>
                            <input type="checkbox"
                                   name="UpdateAmazon"
                                   data-bind="checked: updateAmazon, enable: enableUpdateAmazon" /> <span>Update Marketplace</span>
                        </div>
                        <div>
                            <input type="checkbox"
                                   name="CancelCurrentOrderLabel"
                                   data-bind="checked: cancelCurrentOrderLabel, enable: enableCancelCurrentOrderLabel" /> <span>Cancel current order label</span>
                        </div>

                        <div>
                            <input type="checkbox"
                                   style="margin-top: 8px"
                                   name="ReduceInventory"
                                   data-bind="checked: reduceInventory, enable: enableReduceInventory" /> <span>Reduce Inventory</span>
                        </div>
                    </div>

                    <div style="padding-top: 15px; padding-left: 7px">
                        <div>Comment</div>
                        <textarea rows="3"
                                  style="width: 350px"
                                  class="k-textbox"
                                  data-bind="value: orderComment"></textarea>
                    </div>

                    <div class="buttons" style="padding-top: 15px; padding-left: 7px">
                        <button type="button"
                                id="generateButton"
                                name="Generate"
                                data-bind="click: onSubmit, enable: canGenerate(), css: {'k-state-disabled': !canGenerate() }"
                                class="k-button"
                                style="width: 120px">
                            Generate
                        </button>
                        <div data-bind="text: loadingText"></div>
                        <div style="padding-top: 8px">
                            <div class="text-danger"
                                 data-bind="html: printError"></div>
                            <div class="text-success"
                                 data-bind="html: printSuccess"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script id="itemsTemplate" type="text/kendo-tmpl">
    #if (1) {#
    </td></tr>
    #}#
    #if (Items != null) {
    for (var i=0; i < Items.length; i++) {#
    <tr class="k-detail-row">
        <td></td>
        <td>#= tmpl.t('order-item-image-column-template', data.Items[i])#</td>
        <td>#= tmpl.t('order-item-buyer-column-template', Items[i])#</td>
        <td>#= Items[i].Quantity#</td>
        <td></td>
        <td></td>
        <td>#= tmpl.t('order-item-price-column-template', Items[i])#</td>
        <td><div>#=Items[i].WeightString#</div></td>
        <td></td>
        <td></td>
        <td></td>
        <td>
            #if (Items.Length != i - 1) {#
        </td>
    </tr>
    #}#
    #}
    }#
</script>

@Html.Partial(MVC.Shared.Views._TemplatesOrder)

<script type="text/javascript">
    $(document).ready(function () {

        var model = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

        var settings = {
            stateList: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(OptionsHelper.States)),
            countryList: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(OptionsHelper.Countries)),
            reasonList: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(MailViewModel.Reasons)),
            defaultCountryCode: '@Constants.DefaultCountryCode',

            markets: {
                eBay: '@((int)MarketType.eBay)',
                amazon: '@((int)MarketType.Amazon)',
                amazonEU: '@((int)MarketType.AmazonEU)',
                amazonAU: '@((int)MarketType.AmazonAU)',
                magento: '@((int)MarketType.Magento)',
                walmart: '@((int)MarketType.Walmart)',
                walmartCA: '@((int)MarketType.WalmartCA)',
                jet: '@((int)MarketType.Jet)',
            },

            reasonCodes: {
                replacementLabel: '@((int)MailLabelReasonCodes.ReplacementLabelCode)',
                replacingLostDamaged: '@((int)MailLabelReasonCodes.ReplacingLostDamagedReasonCode)',
                resendingOrder: '@((int)MailLabelReasonCodes.ResendingOrderCode)',
                returnLabel: '@((int)MailLabelReasonCodes.ReturnLabelReasonCode)',
                manualLabel: '@((int)MailLabelReasonCodes.ManualLabelCode)',
                exchange: '@((int)MailLabelReasonCodes.ExchangeCode)',
                other: '@((int)MailLabelReasonCodes.OtherCode)',
            },

            orderStatuses: {
                shipped: '@OrderStatusEnumEx.Shipped',
            },

            shippingProviderList: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(MailViewModel.ShippingProviderList)),
            shippingProviderTypes: {
                dhl: '@((int)ShipmentProviderType.Dhl)',
                dhlECom: '@((int)ShipmentProviderType.DhlECom)',
                ibc: '@((int)ShipmentProviderType.IBC)',
                amazon: '@((int)ShipmentProviderType.Amazon)',
                stamps: '@((int)ShipmentProviderType.Stamps)',
                fedexOneRate: '@((int)ShipmentProviderType.FedexOneRate)',
                fedexStandardRate: '@((int)ShipmentProviderType.FedexGeneral)',
                skyPostal: '@((int)ShipmentProviderType.SkyPostal)'
            },

            shippingMethods: {
                firstClass: '@((int)ShippingUtils.FirstClassShippingMethodId)',
                intlFlat: '@((int)ShippingUtils.InternationalFlatShippingMethodId)',
                intlRegular: '@((int)ShippingUtils.InternationalRegularShippingMethodId)',
                amzFirstClass: '@((int)ShippingUtils.AmazonFirstClassShippingMethodId)',

                dhlExpressWorldWide: '@((int)ShippingUtils.DhlExpressWorldWideShippingMethodId)',
                dhlExpressMx: '@((int)ShippingUtils.AmazonDhlExpressMXShippingMethodId)',
                dynamexPtpSame: '@((int)ShippingUtils.DynamexPTPSameShippingMethodId)',
            }
        };

        mailingVm = MailingLabelViewModel("#grid", model, settings);

        ko.validation.init({
            errorElementClass: "input-validation-error",
            //errorClass: "input-validation-error",
            errorMessageClass: "field-validation-error-inline",
            decorateElement: true,
            decorateInputElement: true,
            decorateElementOnModified: true
        });

        ko.applyBindings(mailingVm, document.getElementById('page-content'));
    });
</script>