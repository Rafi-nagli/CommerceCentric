@using Amazon.Core.Entities.Enums
@using Amazon.Core.Models
@using Amazon.Web.ViewModels.Inventory
@using Amazon.Web.Models

@{
    Layout = null;
}


<script type="text/javascript">
    var CustomReportModel = function(model, settings) {
        var self = this;

        self.isLoaded = ko.observable(false);

        //self.popupNode = null;
        //self.popup = null;

        self.settings = settings;
        self.model = model;

        self.messages = ko.observableArray([]);
        self.checkFtpMessages = ko.observableArray([]);

        self.submitCallback = settings.submitCallback;

        self.wizardStep = ko.observable(0);
        self.setStep = function (step) {
            console.log(step);
            self.updateFilters();
            self.wizardStep(step);
        }
        self.getStep = function () {
            return self.wizardStep();
        }

        self.id = ko.observable(model.Id);
        self.name = ko.observable(model.Name);
        console.log(self.id());
        

        self.prepareFieldRow = function (r) {
            r.customFullName = ko.observable(r.FullName);
            r.id = ko.observable(r.CustomReportPredefinedFieldId);
            r.title = ko.observable(r.Title);
        };

        self.prepareOperationRow = function (r) {
            r = ko.observable(r);
        };

        self.prepareFilterRow = function (r) {

            r.field = ko.observable(r.Field);
            r.title = ko.observable(r.Field.Title);
            r.name = ko.observable(r.Field.FullName);
            r.dataType = ko.observable(r.Field.FieldDataType);
            r.predefinedFieldId = ko.observable(r.PredefinedFieldId);
            r.operationString = ko.observable(r.OperationString);
            r.valueString = ko.observable(r.ValueString);
            
            r.id = ko.observable(r.Id);
            var availableOperations = r.AvailableOperationsString;
            availableOperations.forEach(function (f) { self.prepareOperationRow(f); });
        };

        var availableFields = model.AvailablePredefinedFields;
        availableFields.forEach(function (f) { self.prepareFieldRow(f); });
        self.availableFields = ko.observableArray(availableFields);
       
        var usedFields = model.UsedFields;
        usedFields.forEach(function (f) { self.prepareFieldRow(f); });
        self.usedFields = ko.observableArray(usedFields);


        var usedFilters = model.UsedFilters;
        usedFilters.forEach(function (f) { self.prepareFilterRow(f); });
        self.usedFilters = ko.observableArray(usedFilters);        

        self.allSourceFields = ko.observableArray([]);
        self.allSourceFields(self.availableFields());

        self.allUsedFields = ko.observableArray([]);
        self.allUsedFields(self.usedFields());

        self.allUsedFilters = ko.observableArray([]);
        self.allUsedFilters(self.usedFilters());

        self.allAvailableFilters = ko.observableArray([]);
        self.allAvailableFilters(self.usedFilters());

        self.dateChanged = function (f) {

            f.sender.element.trigger("change");

            f.sender.element.closest("div").find("input[type='hidden']").val(f.sender.element.val());
            console.log(f.sender.element.closest("div").find("input[type='hidden']").val());
            f.sender.element.closest("div").find("input[type='hidden']").trigger("change");
            //f.sender.element.closest("div").find("input[type='text']").blur();
        }

        self.operatorChanged = function (f) {            
            
            f.sender.element.closest("div").find("input[type='hidden']").val(f.sender.element.val());
            console.log(f.sender.element.closest("div").find("input[type='hidden']").val());
            f.sender.element.closest("div").find("input[type='hidden']").trigger("change");
            /*f.sender.element.closest("div").find("input[type='hidden']").val(f.sender.element.val());
            console.log(f.sender.element.closest("div").find("input[type='hidden']").val());
            f.sender.element.closest("div").find("input[type='hidden']").trigger("change");
            //f.sender.element.closest("div").find("input[type='text']").blur();*/
        }

        self.addFilter = function (f) {
            console.log('f');
            var filterId = $("#allFilters").val();
            var newRow = self.allAvailableFilters().filter(obj => {
                return obj.PredefinedFieldId === parseInt(filterId);
            });
            
            var arr = self.usedFilters();
            arr.push(newRow[0]);
            self.allUsedFilters(arr);
        }

        self.removeFilter= function (f) {            
            var arr = self.allUsedFilters();
            console.log(arr);
            var index = arr.indexOf(f);
            arr.splice(index, 1);
            self.allUsedFilters(arr);
        }

        self.updateFilters = function () {
            console.log('update');
            var dataModel = self.getModel();
            $.ajax({
                url: self.settings.urls.getAvailableFilters,
                data: JSON.stringify({ model: dataModel }),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                type: 'POST',
                success: function (result) {
                    if (result.IsSuccess) {
                        console.log("onSuccess");
                        console.log(result);
                        var filters = result.Data;
                        filters.forEach(function (f) { self.prepareFilterRow(f); });
                        self.allAvailableFilters(filters);                        
                    }
                },
                error: function (result) {
                    console.log("onError");
                    console.log(result);
                }
            });
        };
       

        self.getModel = function () {
            console.log('model');
            var dataModel = {
                Id: self.id(),
                Name: self.name(),                
                
                UsedFields: $.map(self.usedFields(), function (val, key) {
                    return {
                        Id: val.Id,
                        FullName: val.FullName,
                        CustomReportPredefinedFieldId: val.CustomReportPredefinedFieldId 
                    }
                }),
                UsedFilters: $.map(self.usedFilters(), function (val, key) {
                    return {
                        Id: val.Id,
                        OperationString: val.OperationString,
                        PredefinedFieldId: val.PredefinedFieldId,
                        ValueString: val.ValueString,
                        Field: val.Field
                    }
                }),
            };
            console.log(dataModel);
            return dataModel;
        }        

        self.checkConnection = function () {
            var dataModel = self.getModel();

            $.ajax({
                url: self.settings.urls.checkConnection,
                data: JSON.stringify({ model: dataModel }),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                type: 'POST',
                success: function (result) {
                    console.log("onSuccess");
                    console.log(result);
                    self.checkFtpMessages(result.Messages);
                },
                error: function (result) {
                    console.log("onError");
                    console.log(result);
                    self.checkFtpMessages(result.Messages);
                }
            });
        }

        self.submit = function () {
            var defer = $.Deferred();
            var dataModel = self.getModel();

            $.ajax({
                url: self.settings.urls.submit,
                data: JSON.stringify({ model: dataModel }),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                type: 'POST',
                success: function(result) {
                    console.log("onSuccess");
                    console.log(result);
                    if (result.IsSuccess) {
                        defer.resolve();
                    } else {
                        defer.reject();
                        self.messages(result.Messages);
                    }
                },
                error: function (result) {
                    console.log(result);
                    self.messages(result.Messages);
                    defer.reject();
                }
            });
            return defer;
        }

        self.onSave = function(data, e) {
            console.log('onSave');

            if (self.validate()) {
                $(e.target).showLoading("updating...");
                self.submit().done(function () {
                    popupWindow.customAction('Refresh');
                    if (self.submitCallback != null)
                        self.submitCallback(null);
                    self.onClose();
                }).always(function() {
                    $(e.target).hideLoading();
                });
            }
        }

        self.onClose = function() {
            console.log('onClose');
            //self.closeEvent();
            //self.popup.close();
            popupWindow.close();
        }

        self.errors = ko.validation.group(self, { deep: true });
        self.isValid = ko.computed(function () {
            return self.errors().length === 0;
        });

        self.validate = function () { // function(data, e) {
            if (self.isValid()) { //validator.validate() &&
                console.log("validate true");

                return true;
            } else {
                console.log("validate false");
                self.errors.showAllMessages();
                self.wizardStep(0);

                return false;
            }
        };

        //self.errors = ko.validation.group(self, { deep: true });
        //self.isValid = ko.computed(function() {
        //    return self.errors.length == 0;
        //});
        //self.onSubmit = function(e) { // function(data, e) {
        //    //console.log(data);
        //    console.log(e);
        //    console.log("save click");

        //    //var validator = $("#form").kendoValidator().data('kendoValidator');

        //    //http://stackoverflow.com/questions/18872652/how-to-customize-the-error-message-its-placement-in-knockout-validation
        //    //http://jsfiddle.net/KHFn8/3238/
        //    if (self.errors().length == 0) { //validator.validate() &&
        //        console.log("validate true");

        //        return true;
        //    } else {
        //        console.log("validate false");
        //        self.errors.showAllMessages();
        //        e.preventDefault();
        //        return false;
        //    }
        //};
        self.myDropCallback = function (arg) {
            /*if (console) {
                console.log("Moved '" + arg.item.name() + "' from " + arg.sourceParent.id + " (index: " + arg.sourceIndex + ") to " + arg.targetParent.id + " (index " + arg.targetIndex + ")");
            }*/
        };

        self.isLoaded(true);
    };

    var lastSortTime = Date.now();
    $(document).ready(function() {
        ko.validation.init({
            errorElementClass: "input-validation-error",
            //errorClass: "input-validation-error",
            errorMessageClass: "field-validation-error",
            decorateElement: true,
            decorateInputElement: true,
            decorateElementOnModified: true
        });

        ko.bindingHandlers.sortable = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel) {

                
                var config = valueAccessor();
                if (!config) { return; }

                var allBindings = allBindingsAccessor();
                var array = allBindings.foreach || allBindings.template.foreach;

                var $list = jQuery(element);
                
                $list
                    .data('ko-sort-array', array)
                    .sortable(config)
                    .bind('sortstart', function (event, ui) {
                        ui.item.data('ko-sort-array', array);
                        ui.item.data('ko-sort-index', ui.item.index());
                    })
                    .bind('sortupdate', function (event, ui) {
                        var d = (Date.now() - lastSortTime);
                        if (d < 100) {
                            console.log('Cancel sort ' + d);
                            return;
                        }
                        var $newList = ui.item.parent();
                        var oldArray = ui.item.data('ko-sort-array');
                        var oldIndex = ui.item.data('ko-sort-index');
                        var newArray = $newList.data('ko-sort-array');
                        var newIndex = ui.item.index();
                        var item = oldArray().splice(oldIndex, 1)[0];
                        newArray().splice(newIndex, 0, item);
                        console.log(newArray());
                        lastSortTime = Date.now();
                        console.log('success sort ' + lastSortTime);                        
                    });
                
            }
        };        

        var settings = {
            urls: {
                submit: '@Url.Action(MVC.CustomReport.Submit())',
                checkConnection: '@Url.Action(MVC.CustomReport.CheckConnection())',
                getAvailableFilters: '@Url.Action(MVC.CustomReport.GetAvailableFilters())',
            },
            
        };
        var model = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
        var сustomReportModel = new CustomReportModel(model, settings);
        ko.applyBindings(сustomReportModel, document.getElementById('custom-feed-container'));
        $('#custom-feed-container input[type=checkbox][data-toggle^=toggle]').bootstrapToggle({
            size: 'mini',
        });
    });
</script>



<style>
    .k-window{
        width:520px!important;
    }
    .droptarget {
        padding: 3px 7px;
        border: 1px solid #ccc;
        min-width: 90px;
        border-radius: 3px;
        display: block;
        min-height: 14px;
    }

    .draggable {
        border: 1px solid #ccc;
        border-radius: 3px;
        display: block;
        min-width: 100px;
        margin: 2px;
        padding: 3px 7px;
        cursor: move;
    }

    .dragover {
        background-color: #ffd800;
    }

    .sortable {
        padding-inline-start: 0px;
        list-style-type: none;
        margin: 0;
        padding: 0;
        margin-bottom: 10px;        
        padding: 5px; 
        height:100%;        
    }

        
</style>

<!-- ko stopBinding: true -->
<div>
    <div id="custom-feed-container">
        @Html.ValidationSummary(true)

        <div class="inventory-popup">
            <div class="k-edit-form-container" style="width: auto">
                <div class="panel panel-default" style="padding:5px;">
                    Custom Report Name:
                    <input type="text" data-bind="value: name,
                            valueUpdate: 'afterkeydown'",
                            class="k-textbox">
                </div>
                <div style="padding-top: 10px">
                    <ul class="nav nav-tabs" style="padding-top: 10px;">
                        <li role="presentation" data-bind="css: { 'active': wizardStep() == 0 }"><a href="javascript:;" data-bind="click: function() { setStep(0); }">Fields</a></li>
                        <li role="presentation" data-bind="css: { 'active': wizardStep() == 1 }"><a href="javascript:;" data-bind="click: function() { setStep(1); }">Filters</a></li>
                    </ul>
                </div>

                <div class="style-panel" data-bind="visible: getStep() == 0">
                    <table style="vertical-align: top">
                        <colgroup>
                            <col style="width: 250px" />
                            <col style="width: 250px" />
                        </colgroup>
                        <tr>
                            <td style="vertical-align: top">
                                <div class="panel panel-default">
                                    <div class="panel-heading">Available Fields</div>                                    
                                    <div class="panel-body" style="height: 400px;">
                                        <ul style="" class="sortable" data-bind="foreach: allSourceFields, sortable: { connectWith: '.sortable' }">
                                            <li class="draggable">
                                                <img src="~/Images/drag-area-icon.png" height="12px" />
                                                <span data-bind="text: Title"></span>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </td>
                            <td style="vertical-align: top">
                                <div class="panel panel-default">
                                    <div class="panel-heading">Used Fields</div>
                                    <div class="panel-body" style="height: 400px;">
                                        <ul style="padding-inline-start: 0px;" class="sortable" data-bind="foreach: allUsedFields, sortable: { connectWith: '.sortable' }">
                                            <li class="draggable">
                                                <img src="~/Images/drag-area-icon.png" height="12px" />
                                                <span data-bind="text: Title"></span>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </td>

                        </tr>
                    </table>
                </div>

                <div class="style-panel" data-bind="visible: getStep() == 1">
                    <table>
                        <tr>
                            <td>
                                <div>
                                    <a href="#"
                                       class="k-button k-button-icontext k-grid-add"
                                       data-bind="click: addFilter">
                                        <span class="k-icon k-add"></span>
                                        Filter
                                    </a>
                                </div>
                            </td>
                            <td>
                                <input id="allFilters" style="width: 200px"
                                       data-bind="kendoDropDownList: {

                                       data: allAvailableFilters,
                                       dataTextField: 'title',
                                       dataValueField: 'predefinedFieldId',

                                       }" />
                            </td>

                        </tr>
                    </table>
                    <table id="droptarget">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Operation</th>
                                <th>Value</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody data-bind="foreach: allUsedFilters">
                            <tr>
                                <td style="width: 170px">
                                    <span data-bind="text: Field.Title"></span>
                                </td>
                                <td>
                                    <div>
                                        <input style="width: 130px"
                                               data-bind="kendoDropDownList: {

                                           data: AvailableOperationsString,
                                           value: OperationString,
                                            change: $root.operatorChanged
                                           }" />
                                        <input type="hidden" data-bind="value: OperationString">
                                     </div>
                                </td>
                                <td>
                                    <div data-bind="if: Field.FieldDataType === 'datetime'">
                                        <input data-bind="kendoDatePicker: { value: ValueString, change: $root.dateChanged }" 
                                         class="k-input" style="width: 100%;">
                                        <input type="hidden" data-bind="value: ValueString">
                                    </div>
                                    <div data-bind="if: Field.FieldDataType !== 'datetime'">
                                        <input type="text" data-bind="value: ValueString,
                                           valueUpdate: 'afterkeydown'" 
                                               class=" k-textbox">
                                    </div>

                                </td>
                                <td style="width: 10px">
                                    <button style="width: 22px; margin: 0px; padding: 0px 5px"
                                            class="k-button"
                                            data-bind="click: $root.removeFilter">
                                        <span style="font-size: 11px" class="glyphicon glyphicon-remove am-icon"></span>
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div>
                    <messages params="{ messages: messages }"></messages>
                </div>

                <div class="clear"></div>

                <div class="k-edit-buttons k-state-default popup-button-panel"
                     style="position: static">
                    
                    <table style="margin-left: auto">
                        <tr>
                            <td>
                                <button tabindex="300"
                                        data-bind="click: onSave"
                                        type="button"
                                        class="k-button k-button-icontext k-grid-update">
                                    <span class="k-icon k-update"></span>Save
                                </button>
                            </td>

                            <td>
                                <button class="k-button k-button-icontext k-grid-cancel"
                                        tabindex="301"
                                        type="button"
                                        data-bind="click: onClose">
                                    <span class="k-icon k-cancel"></span>Cancel
                                </button>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>

    </div>
</div>
<!-- /ko -->