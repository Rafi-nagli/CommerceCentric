@using Amazon.Common.Helpers
@using Amazon.Core.Entities.Enums
@using Amazon.Core.Models
@using Amazon.Web.Models
@using Amazon.Web.ViewModels.CustomReports
@using Kendo.Mvc.UI
@model Amazon.Web.ViewModels.CustomReports.CustomReportViewModel
@{
    ViewBag.Title = "Custom Reports";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Icon
{
    <link rel="shortcut icon" href="/Content/Images/inventory.ico" />
}

<style>
    .k-grid tbody a.k-button {
        min-width: 78px;
    }
</style>

<script src="~/Scripts/knockout-kendo.min.js" type="text/javascript"></script>


<script>
    var CustomReportListModel = function (model, settings) {
        var self = this;
        ko.BaseViewModel.call(self);

        //Init
        self.model = model;
        self.settings = settings;

        self.gridId = self.settings.gridId;
        self.gridNode = $(self.gridId);
        self.grid = self.gridNode.data("kendoGrid");

        @*self.addReport = function() {
            console.log("addReport");

            var settings = {
                urls: {
                    addReport: '@Url.Action("Add", "CustomReport")',
                    submit: '@Url.Action("Submit", "CustomReport")',
                },
                submitCallback: function () { self.search(); },
            };
            var popupModel = new CustomReportModel(null,
                settings);
            popupModel.show();

            //popupWindow.initAndOpen(self.settings.urls.addSaleFeed, "Upload Sales", 600);
        };*@

        self.addReport = function (sender) {
            self.editReport(sender, null);
        }

        self.deleteReport = function (sender, id) {
            console.log("deleteReport, id=" + id);
            if (confirm('Are you sure you want to delete this custom report?')) {
                $.ajax({
                    url: self.settings.urls.deleteReport,
                    data: JSON.stringify({ id: id }),
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8',
                    type: 'POST',
                    async: false,
                    success: function () {
                        console.log("custom report was deleted successfully, id=" + id);
                        self.search()
                    }
                });
            }
        }

        self.editReport = function (sender, id) {
            var params = "";
            var title = "Add report";
            if (id != null) {
                params = "?id=" + id;
                title = "Edit report";
            }
            popupWindow.initAndOpenWithSettings({
                content: self.settings.urls.editReport + params,
                title: title,
                width: 800,
                customAction: self.onPopupCustomAction,
                //closeSuccess: self.onPopupCloseSuccess,
                //submitCallback: function (result) {
                //    console.log("submitCallback");
                //    //self.prepareRow(result.Row);
                //    //self.grid.updateRowField(result.Row, result.UpdateFields);
                //    self.search();
                //}
            });
        };

        self.exportToExcelUrl = function (sender, id) {
            var params = "";
            var title = "Export report";
            if (id != null) {
                params = "?id=" + id;
                title = "Export report";
            }
            return self.settings.urls.exportToExcelUrl + params;
        };

        self.viewReport = function (sender, id) {
            var params = "";
            var title = "View report";
            if (id != null) {
                params = "?id=" + id;
                title = "View report";
            }
            return self.settings.urls.viewReport + params;
        };

        

        self.onPopupCustomAction = function () {
            console.log("onPopupCustomAction");
            self.search();
        }

        //Search
        self.search = function () {
            var params = self.getGridParams();

            self.resetRowNumber(0);

            if (self.grid.dataSource.page() != 1) {
                self.grid.dataSource.page(1); //May call read
            }
            self.grid.dataSource.read(params);
        };

        self.searchByKeyCmd = function (data, event) {
            if (event.keyCode == 13)
                self.search(true);
            return true;
        };

        self.getGridParams = function () {
            console.log("getGridParams");

            return {

            };
        };

        self.clear = function () {

        };

        self.clearAndSearch = function () {
            self.clear();
            self.search(false);
        };

        self.searchByButton = function () {
            self.search(true);
        };


        //Grid

        self.onDataBound = function (e) {
            console.log("dataBound");
        };

        helper.ui.addTopPager(self.grid);

        self.search(false);
    };
</script>

<div id="page-content">
    <div id="windowContainer"></div>

    <ol class="breadcrumb">
        <li><a href="#">Reports</a></li>
        <li class="active">Custom Reports</li>
    </ol>

    <div class="panel panel-default">
        <div class="filters">

        </div>
    </div>

    <div class="k-toolbar k-grid-toolbar">
        <a href="#"
           class="k-button k-button-icontext k-grid-add"
           data-bind="click: addReport">
            <span class="k-icon k-add"></span>
            Custom Report
        </a>
    </div>

    @(Html.Kendo().Grid<CustomReportViewModel>()
                          .Name("CustomReportList")
                          .Editable(e => e.Mode(GridEditMode.PopUp))
                          .Columns(columns =>
                          {
                              columns.Bound(c => c.Id)
                                  .ClientTemplate("#=customReportListVm.renderNumber(data)#")
                                  .Title("#")
                                  .Width(20)
                                  .Sortable(false);
                              columns.Bound(c => c.Name)
                                  .Title("Report Name").Width(100);
                              columns.Bound(c => c.FieldsString)
                                  .Title("Columns");                              
                              columns.Bound(c => c.CreateDate)
                                  .ClientTemplate("#=tmpl.f(FormattedCreateDate, 'MM.dd.yyyy HH:mm')#")
                                  .Width(150)
                                  .Title("Create Date");
                              columns.Bound(c => c.Id)
                                .ClientTemplate("#= tmpl.t('actions-column-template', data)#")
                                .Width(378)
                                .Title("Actions");
                          })
                          .Sortable(conf => conf.Enabled(true).SortMode(GridSortMode.SingleColumn))
                          .Pageable(conf => conf.Enabled(true).Refresh(true))
                          .Filterable(conf => conf.Enabled(true))
                          .AutoBind(false)
                          .Events(e =>
                          {
                              e.DataBound("onDataBound");
                          })
                          .DataSource(dataSource => dataSource
                              .Ajax()
                              .ServerOperation(false)
                              .PageSize(50)
                              .Model(conf => conf.Id(m => m.Id))
                              .Sort(conf =>
                              {
                                  conf.Add(n => n.CreateDate).Descending();
                              })
                              .Read(read => read.Action(MVC.CustomReport.ActionNames.GetAll, MVC.CustomReport.Name)
                                  .Data("GetGridParams"))))

</div>

<script type="text/x-kendo-template" id="actions-column-template">
    <a href='javascript: void(0)'
       class='k-button'
       style='width:80px' onclick='customReportListVm.editReport(this, "#=data.Id#")'>
        <span class='glyphicon glyphicon-pencil am-icon'></span>Edit
    </a>
    <a class='k-button k-button-icontext' style="min-width:80px" onclick="customReportListVm.deleteReport(this, '#=Id#')"><span class="k-icon k-delete" style="margin: 0px"></span>Delete</a>
    <a href="javascript: void(0)" onclick="javascript:window.open(customReportListVm.exportToExcelUrl(this, '#=Id#'))"       
       class="k-button">
        <span class='glyphicon glyphicon-save-file am-icon'></span>To Excel
    </a>
    <a href="javascript: void(0)" onclick="javascript:window.open(customReportListVm.viewReport(this, '#=Id#'))"       
       class="k-button">
        <span class='glyphicon glyphicon-new-window am-icon'></span>View
    </a>
</script>

<script>
    var customReportListVm = null;

    function GetGridParams() {
        console.log("GetGridParams");
        if (customReportListVm != null)
            customReportListVm.getGridParams();
        return {};
    }

    function onDataBound(e) {
        if (customReportListVm != null)
            customReportListVm.onDataBound(e);
    }

    $(document).ready(function() {
        var settings = {
            gridId: "#CustomReportList",
            idFieldName: "Id",
            urls: {
                editReport: '@Url.Action(MVC.CustomReport.EditFeed())',
                deleteReport: '@Url.Action(MVC.CustomReport.DeleteFeed())',
                exportToExcelUrl: '@Url.Action(MVC.CustomReport.ExportToExcel())',
                viewReport: '@Url.Action(MVC.CustomReportView.Index())',
            }
        };
        var model = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
        customReportListVm = new CustomReportListModel(model, settings);
        ko.validation.init({
            errorElementClass: "input-validation-error",
            errorMessageClass: "field-validation-error",
            decorateElement: true,
            decorateInputElement: true,
            decorateElementOnModified: true
        });
        ko.applyBindings(customReportListVm, document.getElementById('page-content'));
    });

</script>
