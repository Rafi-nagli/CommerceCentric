@using Amazon.Core.Models
@using Amazon.Web.Models
@using Amazon.Web.ViewModels.Products
@using Kendo.Mvc.UI
@model Amazon.Web.ViewModels.Products.ItemExportViewModel
@{
    Layout = null;
}

<script>
    var ItemExportModel = function(model, settings) {
        var self = this;

        self.model = model;
        self.settings = settings;

        self.market = ko.observable(model.Market);
        self.marketplaceId = ko.observable(model.MarketplaceId);

        self.isLoading = ko.observable(false);
        self.hasData = ko.observable(false);
        self.messages = ko.observableArray([]);
        self.clearMessages = function() {
            self.messages([]);
        }
        self.addInfo = function(msg) {
            self.messages({
                Message: msg,
            });
        };
        self.addError = function(msg) {
            self.messages({
                Message: msg,
                IsError: true
            });
        };
        self.addSuccess = function(msg) {
            self.messages({
                Message: msg,
                IsSuccess: true
            });
        };

        console.log("marketplaceId=");
        console.log(model.MarketplaceId);

        self.market = ko.observable(model.Market);
        self.marketplaceId = ko.observable(model.MarketplaceId || "");

        self.id = ko.observable(null);
        self.asin = ko.observable('');
        self.name = ko.observable('');
        self.copyBulletPoints = ko.observable(false);
        self.pictureSourceType = ko.observable("0");
        self.listingImage = ko.observable(null);
        self.styleImage = ko.observable(null);
        self.styleImageWidth = ko.observable(null);
        self.styleImageHeight = ko.observable(null);

        self.variationList = ko.observableArray([]);

        self.getActiveVariationList = function() {
            return $.grep(self.variationList(), function(n) {
                return n.isSelected();
            });
        };

        self.styleImageLoaded = function(m, e) {
            console.log("styleImageLoaded");
            console.log(e);
            var img = new Image();
            img.onload = function () {
                console.log("img.onload, width=" + this.width);
                self.styleImageWidth(this.width);
                self.styleImageHeight(this.height);
            };
            img.src = (e.target).src;
        }

        self.styleIdSource = new kendo.data.DataSource({
            type: "aspnetmvc-ajax",
            //minLength: 3,
            transport: {
                read: '@Url.Action("GetStyleIdList", "AutoComplete")',
                parameterMap: function (data, action) {
                    console.log("action=" + action);
                    if(action === "read") {
                        console.log("filter=" + data.filter.filters[0].value);
                        return {
                            filter: data.filter.filters[0].value
                        };
                    } else {
                        return data;
                    }
                }
            },
            pageSize: 20,
            serverPaging: true,
            serverFiltering: true
        });

        self.clearModel = function() {
            self.id(null);
            self.asin(null);
            self.name(null);
            self.forceEnableColorVariations(false);
            self.onHold(false);

            self.variationList([]);
        }

        self.prepareVariation = function(entry) {
            //entry.name = ko.computed(function() {
            //    var name = entry.StyleSize;
            //    if (dataUtils.isEmpty(entry.StyleColor))
            //        name += " / " + tmpl.f(entry.StyleColor, '-');
            //    return name;
            //});

            console.log(entry.IsSelected);
            entry.isSelected = ko.observable(entry.IsSelected);
            entry.canEditSKU = ko.observable(true);

            entry.sku = ko.observable(entry.SKU);

            entry.color = ko.observable(entry.Color);
            entry.price = ko.observable(entry.Price);

            entry.barcode = ko.observable(entry.Barcode);
            entry.barcodeErrorMessage = ko.observable('');
            entry.barcode.subscribe(function() {
                entry.barcodeErrorMessage("");
            });

            entry.autoGeneratedBarcode = ko.observable(entry.AutoGeneratedBarcode ? "1" : "0");
            entry.canEditBarcode = ko.computed(function() {
                return entry.canEditSKU() && (entry.autoGeneratedBarcode() == "0");
            });

            entry.size = ko.observable(entry.Size);
            entry.styleSize = ko.observable("");
            entry.sizeList = ko.observable([]);

            entry.styleErrorMessage = ko.observable('');
            entry.styleString = ko.observable();
            entry.styleStringLoading = ko.observable(false);
            entry.styleString.subscribe(function() {
                entry.styleErrorMessage('');
                entry.styleStringLoading(true);
                $.ajax({
                    url: '@Url.Action("GetStyleSizes", "AutoComplete")',
                    data: { styleString: entry.styleString(), onlyWithQty: false },
                    cache: false,
                    success: function(data) {
                        entry.styleStringLoading(false);
                        if (data.Data != null && data.Data.length > 0) {
                            entry.sizeList(data.Data);
                            if (entry.styleItemId() == null)
                                entry.styleItemId(data.Data[0].Value);

                            //Set size name
                            var sizeInfo = entry.sizeList().firstOrDefault(function(s) {
                                return s.Value == entry.styleItemId();
                            });
                            if (sizeInfo != null)
                                entry.styleSize(sizeInfo.Text);
                        } else {
                            entry.styleErrorMessage('StyleString is not found');
                            entry.sizeList([]);
                        }
                    }
                });
            });

            entry.styleItemId = ko.observable(entry.StyleItemId);
            entry.styleItemId.subscribe(function() {
                var sizeInfo = entry.sizeList().firstOrDefault(function(s) {
                     return s.Value == entry.styleItemId();
                });
                if (sizeInfo != null) {
                    var hasConverableSize = $.grep(self.variationList(), function(n) {
                        if (sizeUtils.isConvertableSize(n.styleSize()))
                            return true;
                        return false;
                    }).length > 0;

                    if (dataUtils.isEmpty(entry.Id)) {
                        entry.sku(entry.styleString() + "-" + (hasConverableSize ? sizeUtils.convertSizeForSKU(sizeInfo.Text) : sizeInfo.Text));
                        entry.size(sizeInfo.Text);
                    }
                    entry.styleSize(sizeInfo.Text);
                }
            });

            entry.styleString(entry.StyleString);

            entry.getBarcodeFromStyleSize = function() {
                $.ajax({
                    url: '@Url.Action("GetUnusedBarcodeForStyleItem", "ItemEdit")',
                    data: {
                        styleItemId: entry.styleItemId(),
                        market: self.market(),
                        marketplaceId: self.marketplaceId(),
                    },
                    cache: false,
                    success: function(result) {
                        if (result.IsSuccess && !dataUtils.isEmpty(result.Data)) {
                            entry.barcode(result.Data);
                        } else {
                            entry.barcodeErrorMessage('has no unused barcodes');
                        }
                    }
                });
            }
        }

        self.processModel = function(data) {
            self.hasData(!dataUtils.isEmpty(data.ASIN) || data.Id > 0);

            self.id(data.Id);
            self.name(data.Name);
            self.asin(data.ASIN);

            self.pictureSourceType(data.PictureSourceType.toString());
            self.listingImage(data.ListingImage);
            self.styleImage(data.StyleImage);

            data.VariationList.forEach(function(entry) {
                self.prepareVariation(entry);
            });

            self.variationList(data.VariationList);
        }

        self.addVariation = function(data) {
            var newVariation = {
                Id: null,
                StyleString: null,
                StyleId: null,
                StyleItemId: null,
                RealQuantity: 0,
                IsSelected: true,// ko.observable(true),
                Size: null,
                Color: null,
                Price: 0,
                SKU: "",
                Barcode: "",
                IsPrime: false,
                IsFBA: false,
                AutoGeneratedBarcode: false,
            }
            self.prepareVariation(newVariation);
            self.variationList.push(newVariation);
        }

        self.addStyleVariationModel = null;
        self.addStyleVariations = function(data, e) {
            console.log("onAddStyleVariations");

            if (self.addStyleVariationModel == null)
                self.addStyleVariationModel = new AddStyleVariationsPopupModel(self.model, self.settings);

            var data = {
                existSizes: $.map(self.variationList(), function (n) { return {
                    ItemSize: n.size(),
                    StyleSize: n.styleSize()
                }})
            }

            self.addStyleVariationModel
                .open(data)
                .then(function(items) {
                    var index = 0;
                    console.log('add style variation, exist=' + self.variationList().length);

                    //Remove empty records
                    while (index < self.variationList().length) {
                        console.log(self.variationList()[index].styleString());
                        if (dataUtils.isEmpty(self.variationList()[index].styleString())) {
                            console.log('remove, index=' + index);
                            self.variationList.splice(index, 1);
                        }
                        else {
                            index++;
                        }
                    }

                    for (var i = 0; i < items.length; i++) {
                        self.prepareVariation(items[i]);
                        self.variationList.push(items[i]);
                    }
            });
        }

        self.addMissingSizes = function(data, e) {
            console.log("addMissingSizes");

            var dataModel = {
                existSizes: $.map(self.getActiveVariationList(), function(n) {
                    return {
                        StyleItemId: n.styleItemId(),
                        ItemSize: n.size(),
                        StyleSize: n.styleSize()
                    }
                }),
                Market: self.market(),
                MarketplaceId: self.marketplaceId(),
            };

            $.ajax({
                url: '@Url.Action("GetMissingSizes", "ItemEdit")',
                cache: false,
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                type: 'POST',
                data: JSON.stringify(dataModel),
                success: function(result) {
                    console.log("addMissingSizes.success");
                    if (result.IsSuccess) {
                        var items = result.Data;
                        for (var i = 0; i < items.length; i++) {
                            var firstExistStyleSize = self.getActiveVariationList().firstOrDefault(function(n) { return n.StyleString == items[i].StyleString; });
                            if (firstExistStyleSize != null) { //Copy color, price
                                items[i].Color = firstExistStyleSize.color();
                                items[i].Price = firstExistStyleSize.price();
                            }
                            self.prepareVariation(items[i]);
                            self.variationList.push(items[i]);
                        }
                    }
                }
            });
        }

        self.validate = function () {
            var defer = $.Deferred();
            console.log(self.variationList());
            //Check brands
            var brandNames = $.map(self.variationList(), function (n) { return n.BrandName; });
            var uniqueBrandList = brandNames.filter(function(item, pos, self) {
                return self.indexOf(item) == pos;
            });
            console.log(brandNames);
            if (uniqueBrandList.length > 1) {
                Message.popupAsync({
                    title: 'Confirm',
                    message: 'Are you sure you want to export variations with defferent brands: <br/>' + uniqueBrandList.join(", "),
                    type: Message.YES_NO
                }).done(function () {
                    defer.resolve();
                }).fail(function () {
                    defer.reject();
                });
            } else {
                defer.resolve();
            }

            return defer;
        }

        self.errors = ko.validation.group(self, { deep: true });
        self.isValid = ko.computed(function() {
            return self.errors().length === 0;
        });

        self.onSave = function(data, e) {
            console.log('save');
            self.validate().done(function() {
                $("#submit").click();
            });
        }

        self.onSubmit = function(data, e) { // function(data, e) {
            //console.log(data);
            console.log(e);
            console.log("save click");
            //var validator = $("#form").kendoValidator().data('kendoValidator');

            //http://stackoverflow.com/questions/18872652/how-to-customize-the-error-message-its-placement-in-knockout-validation
            //http://jsfiddle.net/KHFn8/3238/
            if (self.isValid()) { //validator.validate() &&
                console.log("validate true");

                return true;
            } else {
                console.log("validate false");
                self.errors.showAllMessages();
                e.preventDefault();
                return false;
            }
        };

        self.canSubmit = ko.computed(function() {
            var loadingInProgressList = $.grep(self.variationList(), function(n) {
                return n.styleStringLoading();
            });

            return loadingInProgressList.length == 0;
        });


        self.isLoaded = ko.computed(function() {
            return self.hasData();
        });


        //INIT
        if (self.model != null) {
            self.processModel(self.model);
        }
    };

    $(document).ready(function() {
        console.log("onready");
        var model = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
        var settings = {
            markets: {
                eBay: '@((int) MarketType.eBay)',
                magento: '@((int) MarketType.Magento)',
                walmart: '@((int) MarketType.Walmart)',
                walmartCA: '@((int) MarketType.WalmartCA)',
                jet: '@((int) MarketType.Jet)',
                shopify: '@((int) MarketType.Shopify)'
            },
            publishedStatuses: {
                none: @((int)PublishedStatuses.None),
                new: @((int)PublishedStatuses.New),
                hasChanges: @((int)PublishedStatuses.HasChanges),
            },
            urls: {
                createStyleVariations: '@Url.Action("CreateStyleVariations", "ItemExport")',
            },
            isAdmin: @(AccessManager.CanEditSystemInfo() ? 1 : 0),
        };

        var itemModel = new ItemExportModel(model, settings);
        ko.applyBindings(itemModel, document.getElementById('edit-item-container'));
    });
</script>

@Html.Partial("_AddStyleVariationsPopupInfo")

<div id="edit-item-container">
    <div id="edit-container" class="inventory-popup am-item-popup">
        <div class="k-edit-form-container" style="padding: 10px;">

            <input type="hidden" name="Market" data-bind="value: market" />
            <input type="hidden" name="MarketplaceId" data-bind="value: marketplaceId" />
            <input type="hidden" name="Id" data-bind="value: id" />

            <div data-bind="visible: isLoaded">
                <div class="panel panel-default">
                    <div class="panel-heading">General</div>
                    <div class="panel-body">

                        <div class="editor-label">Parent ASIN</div>
                        <div class="editor-field">
                            <input type="text"
                                   class="k-textbox"
                                   name="ASIN"
                                   tabindex="1"
                                   autofocus="autofocus"
                                   style="width: 200px"
                                   data-bind="value: asin" />
                        </div>

                        <div class="editor-label">Name</div>
                        <div class="editor-field">
                            <textarea rows="2"
                                      class="k-textbox"
                                      style="width: 400px"
                                      name="Name"
                                      tabindex="2"
                                      data-bind="value: name"></textarea>
                        </div>
                        <div class="editor-label">Copy Bullet points:</div>
                        <div class="editor-field">
                            <input type="checkbox"
                                   name="CopyBulletPoints"
                                   tabindex="3"
                                   data-bind="value: copyBulletPoints"/>
                        </div>
                        <div class="editor-label">Picture:</div>
                        <div class="editor-field">
                            <table>
                                <colgroup>
                                    <col style="width: 100px"/>
                                </colgroup>
                                <tr>
                                    <td style="vertical-align: top">
                                        <div>
                                            <input type="radio"
                                                   name="PictureSourceType"
                                                   value="@((int) ItemExportViewModel.PictureSourceTypes.FromListing)"
                                                   data-bind="checked: pictureSourceType"/>
                                            listing
                                        </div>
                                        <div>
                                            <div style="margin-right: 5px; padding-top: 3px">
                                                <div class="image-box-holder">
                                                    <img data-bind="attr: { 'src': listingImage}" style="max-width: 75px; max-height: 75px"/>
                                                </div>
                                                <div class="image-zoom-icon">
                                                    <a data-bind="attr: { 'href' : listingImage}" target="_blank" class="k-button">
                                                        <span class="glyphicon glyphicon-zoom-in"></span>
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div>
                                            <input type="radio"
                                                   name="PictureSourceType"
                                                   value="@((int) ItemExportViewModel.PictureSourceTypes.FromStyle)"
                                                   data-bind="checked: pictureSourceType"/>
                                            style (<span data-bind="text: styleImageWidth" />x<span data-bind="text: styleImageHeight" />)
                                        </div>
                                        <div>
                                            <div style="margin-right: 5px; padding-top: 3px">
                                                <div class="image-box-holder">
                                                    <img data-bind="attr: { 'src': styleImage}, event: { load: styleImageLoaded }" style="max-width: 75px; max-height: 75px"/>
                                                </div>
                                                <div class="image-zoom-icon">
                                                    <a data-bind="attr: { 'href' : styleImage}" target="_blank" class="k-button">
                                                        <span class="glyphicon glyphicon-zoom-in"></span>
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                        <div>
                                            <a data-bind="attr: { href: styleImage }, text: styleImage" />
                                        </div>
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-heading">
                        Variations

                        <a href="javascript:;"
                           data-bind="click: addVariation"
                           tabindex="10"
                           class="k-button">
                            <span class="k-icon k-add"></span>Add
                        </a>

                        <a href="javascript:;"
                           data-bind="click: addStyleVariations"
                           tabindex="11"
                           class="k-button">
                            <span class="k-icon k-add"></span>Add Style
                        </a>

                        <a href="javascript:;"
                           data-bind="click: addMissingSizes"
                           tabindex="12"
                           class="k-button">
                            <span class="k-icon k-add"></span>Add Missing Sizes
                        </a>
                    </div>
                    <div class="panel-body">
                        <table style="width: 870px" class="variation-list">
                            <colgroup>
                                <col style="width: 20px" />
                                <col style="width: 140px"/>
                                <col style="width: 50px"/>
                                <col style="width: 85px"/>
                                <col style="width: 85px"/>
                                <col style="width: 85px"/>
                                <col style="width: 150px"/>
                                <col style="width: 225px"/>
                            </colgroup>
                            <tr>
                                <td></td>
                                <td>Style Id</td>
                                <td>Style Item</td>
                                <td>Custom Size</td>
                                <td>Custom Color</td>
                                <td>Price, $</td>
                                <td>SKU</td>
                                <td>Barcode</td>
                            </tr>

                            <tbody data-bind="foreach: variationList">
                                <tr>
                                    <td>
                                        <input type="hidden" data-bind="value: Id, attr: { name: 'VariationList[' + $index() + '].Id' }" />
                                        <input type="hidden" data-bind="value: IsFBA, attr: { name: 'VariationList[' + $index() + '].IsFBA' }" />
                                        <input type="hidden" data-bind="value: IsPrime, attr: { name: 'VariationList[' + $index() + '].IsPrime' }" />

                                        <input type="hidden" data-bind="value: RealQuantity, attr: { name: 'VariationList[' + $index() + '].RealQuantity' }" />
                                        <input type="hidden" data-bind="value: isSelected, attr: { name: 'VariationList[' + $index() + '].IsSelected' }" />
                                        <input type="checkbox" data-bind="checked: isSelected, enable: canEditSKU, attr: { tabindex: $index() + 20 }" />
                                    </td>
                                    <td>
                                        <input style='width: 140px' class="k-textbox" data-bind="kendoAutoComplete: {
                                           value: styleString,
                                           data: {},
                                           minLenght: 3,
                                           dataSource: $root.styleIdSource }, attr: { name: 'VariationList[' + $index() + '].StyleString', tabindex: $index() + 1000 }" />
                                        <div data-bind="text: styleErrorMessage" class="red"></div>
                                    </td>
                                    <td>
                                        <input type="hidden" data-bind="value: styleSize, attr: { name: 'VariationList[' + $index() + '].StyleSize' }" />
                                        <input style="width: 80px"
                                               data-bind="attr: { name: 'VariationList[' + $index() + '].StyleItemId', tabindex: $index() + 2000 },
                                                kendoDropDownList: {data: sizeList, value: styleItemId, dataTextField: 'Text', dataValueField: 'Value' }"/>
                                    </td>
                                    <td>
                                        <input type="text"
                                               style='width: 80px'
                                               class="k-textbox"
                                               data-bind="value: size, attr: { name: 'VariationList[' + $index() + '].Size', tabindex: $index() + 3000 }" />
                                    </td>
                                    <td>
                                        <input type="text"
                                               style='width: 80px'
                                               class="k-textbox"
                                               data-bind="value: color, attr: { name: 'VariationList[' + $index() + '].Color', tabindex: $index() + 4000 }" />
                                    </td>
                                    <td>
                                        <input type="text"
                                               style='width: 80px'
                                               class="k-textbox"
                                               data-bind="value: price, attr: { name: 'VariationList[' + $index() + '].Price', tabindex: $index() + 5000 }" />
                                    </td>
                                    <td>
                                        <input type="hidden" data-bind="value: sku, attr: { name: 'VariationList[' + $index() + '].SKU' }" />
                                        <input type="text"
                                               style='width: 155px'
                                               class="k-textbox"
                                               data-bind="value: sku, enable: canEditSKU, attr: { tabindex: $index() + 6000 }"/>
                                    </td>
                                    <td>
                                        <input type="hidden" data-bind="value: barcode, attr: { name: 'VariationList[' + $index() + '].Barcode' }"/>
                                        <div>
                                            <span data-bind="visible: canEditSKU">
                                                <input type="radio" value="1" data-bind='checked: autoGeneratedBarcode, attr: { name: "VariationList[" + $index() + "].AutoGeneratedBarcodeInt", tabindex: $index() * 3 + 2 + 7000 }' /> auto-gen
                                                &nbsp;
                                            </span>
                                            <input type="radio" value="0" style="margin-left: 3px" data-bind='checked: autoGeneratedBarcode, attr: { name: "VariationList[" + $index() + "].AutoGeneratedBarcodeInt", tabindex: $index() * 3 + 7000 }'/>
                                            <input type="text"
                                                   style='width: 105px'
                                                   class="k-textbox"
                                                   data-bind="value: barcode, enable: canEditBarcode, attr: { tabindex: $index() * 3 + 1 + 7000 }"/>
                                        </div>
                                        <div style="text-align: right"><a href="javascipt:;" tabindex="-1" data-bind="click: getBarcodeFromStyleSize">load from style</a></div>
                                        <div style="text-align: right">
                                            <span class="red" data-bind="text: barcodeErrorMessage"></span>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>

                        @Html.ValidationSummary(false)
                    </div>
                </div>
            </div>

        </div>
    </div>

    <div class="k-edit-buttons k-state-default popup-button-panel" style="position: static">
        <table style="width: 100%">
            <tr>
                <td>
                    <table style="margin-left: auto">
                        <tr>
                            <td>
                                <button type="submit" id="submit" style="display: none"/>
                                <button tabindex="100000"
                                        data-bind="click: onSave, enable: canSubmit, css: {'k-state-disabled': !canSubmit() }"
                                        class="k-button k-button-icontext k-grid-update">
                                    <span class="k-icon k-update"></span>Export
                                </button>
                            </td>
                            <td style="padding-left: 4px">
                                <button class="k-button k-button-icontext k-grid-cancel"
                                        type="reset"
                                        tabindex="100001"
                                        id="cancel"
                                        onclick="popupWindow.close()">
                                    <span class="k-icon k-cancel"></span>Cancel
                                </button>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
        </table>
    </div>
</div>