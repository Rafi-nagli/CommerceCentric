// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace Amazon.Web.Controllers
{
    public partial class BatchController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public BatchController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected BatchController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ActiveBatches()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ActiveBatches);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult GetBatches()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetBatches);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CreateBatch()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateBatch);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AddOrdersToBatch()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddOrdersToBatch);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CheckAddOrdersToBatch()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CheckAddOrdersToBatch);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult LockBatch()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LockBatch);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult RemoveFromBatch()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RemoveFromBatch);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult RemoveMultipleFromBatch()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RemoveMultipleFromBatch);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ReCalcShippingService()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ReCalcShippingService);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpgradeShippingService()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpgradeShippingService);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DowngradeShippingService()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DowngradeShippingService);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ToggleArchive()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ToggleArchive);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateBatch()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateBatch);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public BatchController Actions { get { return MVC.Batch; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Batch";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Batch";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Batches = "Batches";
            public readonly string ActiveBatches = "ActiveBatches";
            public readonly string GetBatches = "GetBatches";
            public readonly string CreateBatch = "CreateBatch";
            public readonly string AddOrdersToBatch = "AddOrdersToBatch";
            public readonly string CheckAddOrdersToBatch = "CheckAddOrdersToBatch";
            public readonly string LockBatch = "LockBatch";
            public readonly string RemoveFromBatch = "RemoveFromBatch";
            public readonly string RemoveMultipleFromBatch = "RemoveMultipleFromBatch";
            public readonly string GetDayBatchNumber = "GetDayBatchNumber";
            public readonly string ReCalcShippingService = "ReCalcShippingService";
            public readonly string UpgradeShippingService = "UpgradeShippingService";
            public readonly string DowngradeShippingService = "DowngradeShippingService";
            public readonly string ToggleArchive = "ToggleArchive";
            public readonly string UpdateBatch = "UpdateBatch";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Batches = "Batches";
            public const string ActiveBatches = "ActiveBatches";
            public const string GetBatches = "GetBatches";
            public const string CreateBatch = "CreateBatch";
            public const string AddOrdersToBatch = "AddOrdersToBatch";
            public const string CheckAddOrdersToBatch = "CheckAddOrdersToBatch";
            public const string LockBatch = "LockBatch";
            public const string RemoveFromBatch = "RemoveFromBatch";
            public const string RemoveMultipleFromBatch = "RemoveMultipleFromBatch";
            public const string GetDayBatchNumber = "GetDayBatchNumber";
            public const string ReCalcShippingService = "ReCalcShippingService";
            public const string UpgradeShippingService = "UpgradeShippingService";
            public const string DowngradeShippingService = "DowngradeShippingService";
            public const string ToggleArchive = "ToggleArchive";
            public const string UpdateBatch = "UpdateBatch";
        }


        static readonly ActionParamsClass_ActiveBatches s_params_ActiveBatches = new ActionParamsClass_ActiveBatches();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ActiveBatches ActiveBatchesParams { get { return s_params_ActiveBatches; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ActiveBatches
        {
            public readonly string batchId = "batchId";
        }
        static readonly ActionParamsClass_GetBatches s_params_GetBatches = new ActionParamsClass_GetBatches();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetBatches GetBatchesParams { get { return s_params_GetBatches; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetBatches
        {
            public readonly string request = "request";
            public readonly string showArchive = "showArchive";
        }
        static readonly ActionParamsClass_CreateBatch s_params_CreateBatch = new ActionParamsClass_CreateBatch();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateBatch CreateBatchParams { get { return s_params_CreateBatch; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateBatch
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_AddOrdersToBatch s_params_AddOrdersToBatch = new ActionParamsClass_AddOrdersToBatch();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddOrdersToBatch AddOrdersToBatchParams { get { return s_params_AddOrdersToBatch; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddOrdersToBatch
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_CheckAddOrdersToBatch s_params_CheckAddOrdersToBatch = new ActionParamsClass_CheckAddOrdersToBatch();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CheckAddOrdersToBatch CheckAddOrdersToBatchParams { get { return s_params_CheckAddOrdersToBatch; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CheckAddOrdersToBatch
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_LockBatch s_params_LockBatch = new ActionParamsClass_LockBatch();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LockBatch LockBatchParams { get { return s_params_LockBatch; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LockBatch
        {
            public readonly string batchId = "batchId";
        }
        static readonly ActionParamsClass_RemoveFromBatch s_params_RemoveFromBatch = new ActionParamsClass_RemoveFromBatch();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RemoveFromBatch RemoveFromBatchParams { get { return s_params_RemoveFromBatch; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RemoveFromBatch
        {
            public readonly string batchId = "batchId";
            public readonly string orderId = "orderId";
        }
        static readonly ActionParamsClass_RemoveMultipleFromBatch s_params_RemoveMultipleFromBatch = new ActionParamsClass_RemoveMultipleFromBatch();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RemoveMultipleFromBatch RemoveMultipleFromBatchParams { get { return s_params_RemoveMultipleFromBatch; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RemoveMultipleFromBatch
        {
            public readonly string batchId = "batchId";
            public readonly string orderIds = "orderIds";
            public readonly string toBatchId = "toBatchId";
            public readonly string removeOnHold = "removeOnHold";
        }
        static readonly ActionParamsClass_ReCalcShippingService s_params_ReCalcShippingService = new ActionParamsClass_ReCalcShippingService();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ReCalcShippingService ReCalcShippingServiceParams { get { return s_params_ReCalcShippingService; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ReCalcShippingService
        {
            public readonly string batchId = "batchId";
            public readonly string orderIds = "orderIds";
            public readonly string switchToProviderId = "switchToProviderId";
            public readonly string switchToMethodId = "switchToMethodId";
        }
        static readonly ActionParamsClass_UpgradeShippingService s_params_UpgradeShippingService = new ActionParamsClass_UpgradeShippingService();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpgradeShippingService UpgradeShippingServiceParams { get { return s_params_UpgradeShippingService; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpgradeShippingService
        {
            public readonly string batchId = "batchId";
            public readonly string orderIds = "orderIds";
        }
        static readonly ActionParamsClass_DowngradeShippingService s_params_DowngradeShippingService = new ActionParamsClass_DowngradeShippingService();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DowngradeShippingService DowngradeShippingServiceParams { get { return s_params_DowngradeShippingService; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DowngradeShippingService
        {
            public readonly string batchId = "batchId";
            public readonly string orderIds = "orderIds";
        }
        static readonly ActionParamsClass_ToggleArchive s_params_ToggleArchive = new ActionParamsClass_ToggleArchive();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ToggleArchive ToggleArchiveParams { get { return s_params_ToggleArchive; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ToggleArchive
        {
            public readonly string batchId = "batchId";
        }
        static readonly ActionParamsClass_UpdateBatch s_params_UpdateBatch = new ActionParamsClass_UpdateBatch();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateBatch UpdateBatchParams { get { return s_params_UpdateBatch; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateBatch
        {
            public readonly string request = "request";
            public readonly string batch = "batch";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _Batch = "_Batch";
                public readonly string ActiveBatches = "ActiveBatches";
                public readonly string Batches = "Batches";
            }
            public readonly string _Batch = "~/Views/Batch/_Batch.cshtml";
            public readonly string ActiveBatches = "~/Views/Batch/ActiveBatches.cshtml";
            public readonly string Batches = "~/Views/Batch/Batches.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_BatchController : Amazon.Web.Controllers.BatchController
    {
        public T4MVC_BatchController() : base(Dummy.Instance) { }

        [NonAction]
        partial void BatchesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Batches()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Batches);
            BatchesOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ActiveBatchesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? batchId);

        [NonAction]
        public override System.Web.Mvc.ActionResult ActiveBatches(long? batchId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ActiveBatches);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "batchId", batchId);
            ActiveBatchesOverride(callInfo, batchId);
            return callInfo;
        }

        [NonAction]
        partial void GetBatchesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Kendo.Mvc.UI.DataSourceRequest request, bool? showArchive);

        [NonAction]
        public override System.Web.Mvc.ActionResult GetBatches(Kendo.Mvc.UI.DataSourceRequest request, bool? showArchive)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetBatches);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "request", request);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "showArchive", showArchive);
            GetBatchesOverride(callInfo, request, showArchive);
            return callInfo;
        }

        [NonAction]
        partial void CreateBatchOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Amazon.Web.ViewModels.Orders.CreateBatchViewModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult CreateBatch(Amazon.Web.ViewModels.Orders.CreateBatchViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateBatch);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            CreateBatchOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void AddOrdersToBatchOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Amazon.Web.ViewModels.Orders.CreateBatchViewModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddOrdersToBatch(Amazon.Web.ViewModels.Orders.CreateBatchViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddOrdersToBatch);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            AddOrdersToBatchOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void CheckAddOrdersToBatchOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Amazon.Web.ViewModels.Orders.CreateBatchViewModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult CheckAddOrdersToBatch(Amazon.Web.ViewModels.Orders.CreateBatchViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CheckAddOrdersToBatch);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            CheckAddOrdersToBatchOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void LockBatchOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long batchId);

        [NonAction]
        public override System.Web.Mvc.ActionResult LockBatch(long batchId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LockBatch);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "batchId", batchId);
            LockBatchOverride(callInfo, batchId);
            return callInfo;
        }

        [NonAction]
        partial void RemoveFromBatchOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long batchId, long orderId);

        [NonAction]
        public override System.Web.Mvc.ActionResult RemoveFromBatch(long batchId, long orderId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RemoveFromBatch);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "batchId", batchId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "orderId", orderId);
            RemoveFromBatchOverride(callInfo, batchId, orderId);
            return callInfo;
        }

        [NonAction]
        partial void RemoveMultipleFromBatchOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long batchId, string orderIds, long? toBatchId, bool? removeOnHold);

        [NonAction]
        public override System.Web.Mvc.ActionResult RemoveMultipleFromBatch(long batchId, string orderIds, long? toBatchId, bool? removeOnHold)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RemoveMultipleFromBatch);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "batchId", batchId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "orderIds", orderIds);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "toBatchId", toBatchId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "removeOnHold", removeOnHold);
            RemoveMultipleFromBatchOverride(callInfo, batchId, orderIds, toBatchId, removeOnHold);
            return callInfo;
        }

        [NonAction]
        partial void GetDayBatchNumberOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult GetDayBatchNumber()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetDayBatchNumber);
            GetDayBatchNumberOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ReCalcShippingServiceOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long batchId, string orderIds, int? switchToProviderId, int? switchToMethodId);

        [NonAction]
        public override System.Web.Mvc.ActionResult ReCalcShippingService(long batchId, string orderIds, int? switchToProviderId, int? switchToMethodId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ReCalcShippingService);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "batchId", batchId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "orderIds", orderIds);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "switchToProviderId", switchToProviderId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "switchToMethodId", switchToMethodId);
            ReCalcShippingServiceOverride(callInfo, batchId, orderIds, switchToProviderId, switchToMethodId);
            return callInfo;
        }

        [NonAction]
        partial void UpgradeShippingServiceOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long batchId, string orderIds);

        [NonAction]
        public override System.Web.Mvc.ActionResult UpgradeShippingService(long batchId, string orderIds)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpgradeShippingService);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "batchId", batchId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "orderIds", orderIds);
            UpgradeShippingServiceOverride(callInfo, batchId, orderIds);
            return callInfo;
        }

        [NonAction]
        partial void DowngradeShippingServiceOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long batchId, string orderIds);

        [NonAction]
        public override System.Web.Mvc.ActionResult DowngradeShippingService(long batchId, string orderIds)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DowngradeShippingService);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "batchId", batchId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "orderIds", orderIds);
            DowngradeShippingServiceOverride(callInfo, batchId, orderIds);
            return callInfo;
        }

        [NonAction]
        partial void ToggleArchiveOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long batchId);

        [NonAction]
        public override System.Web.Mvc.ActionResult ToggleArchive(long batchId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ToggleArchive);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "batchId", batchId);
            ToggleArchiveOverride(callInfo, batchId);
            return callInfo;
        }

        [NonAction]
        partial void UpdateBatchOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Kendo.Mvc.UI.DataSourceRequest request, Amazon.Web.ViewModels.OrderBatchViewModel batch);

        [NonAction]
        public override System.Web.Mvc.ActionResult UpdateBatch(Kendo.Mvc.UI.DataSourceRequest request, Amazon.Web.ViewModels.OrderBatchViewModel batch)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateBatch);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "request", request);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "batch", batch);
            UpdateBatchOverride(callInfo, request, batch);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
