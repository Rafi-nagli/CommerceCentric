using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Amazon.Core.Contracts;
using Amazon.Core.Contracts.Factories;
using Amazon.Core.Entities;
using Amazon.Core.Entities.Enums;
using Amazon.Core.Entities.Features;
using Amazon.Core.Entities.Inventory;
using Amazon.Core.Models;
using Amazon.Core.Models.Calls;
using Amazon.Core.Models.SystemActions;
using Amazon.DTO;
using Amazon.InventoryUpdateManual.Models;
using Amazon.Model.Implementation;
using Amazon.Model.Implementation.Markets.DS;
using Amazon.Model.Implementation.Markets.eBay;
using Amazon.Model.Implementation.Sync;
using Amazon.Model.Models;
using DropShipper.Api;

namespace Amazon.InventoryUpdateManual.CallActions
{
    public class CallDsApiProcessing
    {
        private ILogService _log;
        private ITime _time;
        private IDbFactory _dbFactory;
        private ICacheService _cacheService;
        private IQuantityManager _quantityManager;
        private ISystemActionService _actionService;
        private IEmailService _emailService;
        private IBarcodeService _barcodeService;
        private IAutoCreateListingService _autoCreateListingService;

        public CallDsApiProcessing(ILogService log,
            ITime time,
            ICacheService cacheService,
            IQuantityManager quantityManager,
            ISystemActionService actionService,
            IEmailService emailService,
            IDbFactory dbFactory)
        {
            _dbFactory = dbFactory;
            _cacheService = cacheService;
            _quantityManager = quantityManager;
            _actionService = actionService;
            _barcodeService = new BarcodeService(log, time, dbFactory);
            _log = log;
            _time = time;
            _emailService = emailService;

            var itemHistoryService = new ItemHistoryService(_log, _time, _dbFactory);
            var barcodeService = new BarcodeService(log, time, dbFactory);
            _autoCreateListingService = new AutoCreateNonameListingService(_log, _time, dbFactory, cacheService, barcodeService, emailService, itemHistoryService, AppSettings.IsDebug);
        }

        public void CreatePAonMBGListings(string filename)
        {
            //var skuPriceInfo = ExcelReader.LoadPrices(filename, 0, 1);
            var targetMarket = MarketType.DropShipper;
            string targetMarketplaceId = MarketplaceKeeper.DsToMBG;

            using (var db = _dbFactory.GetRWDb())
            {
                var styleIds = new List<string>()
                {
                    "GS20053SS",
                    "TS20054SS",
                    "WS20052SS",
                    "GS20056SS",
                    "WS20055SS",
                    "TS20057SS"
                };// skuPriceInfo.Select(i => i.SKU).ToList();

                var skuPriceInfo = (from i in db.Items.GetAll()
                                    join l in db.Listings.GetAll() on i.Id equals l.ItemId
                                    where i.StyleId.HasValue
                                    group new { i, l } by i.StyleId into byStyleId
                                    select new ItemDTO
                                    {
                                        StyleId = byStyleId.Key,
                                        CurrentPrice = byStyleId.Max(l => l.l.CurrentPrice)
                                    }).ToList();

                var dtoStyleList = db.Styles.GetAllAsDto().Where(st => styleIds.Contains(st.StyleID) && !st.Deleted).ToList();

                var existMarketItems = db.Items.GetAll().Where(i => i.Market == (int)targetMarket
                    && (i.MarketplaceId == targetMarketplaceId || String.IsNullOrEmpty(targetMarketplaceId)))
                    .ToList();

                IList<MessageString> messages;
                foreach (var style in dtoStyleList)
                {
                    if (existMarketItems.Any(i => i.StyleId == style.Id))
                        continue;

                    var priceInfo = skuPriceInfo.FirstOrDefault(s => s.StyleId == style.Id);

                    var model = _autoCreateListingService.CreateFromStyle(db,
                        style.Id,
                        targetMarket,
                        targetMarketplaceId,
                        out messages);

                    model.Market = (int)targetMarket;
                    model.MarketplaceId = targetMarketplaceId;

                    if (model.Variations.Select(i => i.StyleId).Distinct().Count() != 1)
                    {
                        _log.Info("Parent ASIN is multilisting");
                        continue;
                    }

                    model.Variations.ForEach(v => { if (String.IsNullOrEmpty(v.Barcode)) { v.AutoGeneratedBarcode = true; } });
                    model.Variations.ForEach(v => v.CurrentPrice = (priceInfo?.CurrentPrice > 0 ? (priceInfo?.CurrentPrice ?? 99) : 99));

                    _autoCreateListingService.PrepareData(model);
                    _autoCreateListingService.Save(model, null, db, _time.GetAppNowTime(), null);
                }
            }
        }

        public void SyncQty(DropShipperApi api)
        {
            var styles = api.GetQuantities(_log, MarketType.DropShipper, MarketplaceKeeper.DsPAWMCom);
            styles = styles.Where(st => st.StyleID == "WS20052SS").ToList();

            using (var db = _dbFactory.GetRWDb())
            {
                foreach (var incomeStyle in styles)
                {
                    var findStyle = db.Styles.GetAll().FirstOrDefault(st => (st.StyleID == incomeStyle.StyleID
                        || st.OriginalStyleID.Contains(incomeStyle.StyleID + ";"))
                        && !st.Deleted);

                    if (findStyle != null)
                    {
                        var changedStyleItemIds = new List<long>();

                        foreach (var incomeStyleItem in incomeStyle.StyleItems)
                        {
                            var findStyleItem = db.StyleItems.GetAll().FirstOrDefault(si => si.StyleId == findStyle.Id
                                && si.Size == incomeStyleItem.Size
                                && (si.Color == incomeStyleItem.Color
                                    || (String.IsNullOrEmpty(si.Color) && String.IsNullOrEmpty(incomeStyleItem.Color))));
                            if (findStyleItem != null
                                && (findStyleItem.Quantity != incomeStyleItem.Quantity
                                    || findStyleItem.QuantitySetDate != incomeStyleItem.QuantitySetDate))
                            {
                                _quantityManager.LogStyleItemQuantity(db,
                                    findStyleItem.Id,
                                    incomeStyleItem.Quantity,
                                    findStyleItem.Quantity,
                                    QuantityChangeSourceType.SetByAutoQuantity,
                                    null,
                                    null,
                                    null,
                                    _time.GetAppNowTime(),
                                    null);

                                findStyleItem.Quantity = incomeStyleItem.Quantity;
                                findStyleItem.QuantitySetDate = incomeStyleItem.QuantitySetDate;

                                changedStyleItemIds.Add(incomeStyleItem.StyleItemId);
                            }
                            else
                            {
                                _log.Info("Unable to find style size: " + findStyle.StyleID + " - " + incomeStyleItem.Size + " / " + incomeStyleItem.Color);
                            }
                        }
                        db.Commit();

                        if (changedStyleItemIds.Any())
                        {
                            _cacheService.RequestStyleIdUpdates(db,
                                new List<long>() { findStyle.Id },
                                UpdateCacheMode.IncludeChild,
                                null);

                            SystemActionHelper.RequestQuantityDistribution(db, _actionService, findStyle.Id, null);
                        }
                    }
                    else
                    {
                        _log.Info("Unable to find style: " + incomeStyle.StyleID);
                    }
                }
            }
        }


        public void SyncStyles(DropShipperApi api)
        {
            var sync = new DSCustomItemsSync(_log, _time, _dbFactory, _barcodeService, DSHelper.MBGPAId, MarketType.Walmart, "", MarketType.DropShipper, MarketplaceKeeper.DsPAWMCom);
            sync.SyncStyles(api);
        }

        public void SyncItems(DropShipperApi api)
        {
            var sync = new DSCustomItemsSync(_log, _time, _dbFactory, _barcodeService, DSHelper.MBGPAId, MarketType.Walmart, "", MarketType.DropShipper, MarketplaceKeeper.DsPAWMCom);
            sync.SyncItems(api);
        }

        public void TestCloseIBCManifest(DropShipperApi api)
        {
            var form = new ScanFormInfo()
            {
                ScanFormId = "81",
                CloseoutIds = new List<string>()
                {
                    "LX118315802US"
                }
            };
            api.CloseIBCOrders(form);
        }

        public void CallUpdateQty(DropShipperApi api)
        {
            using (var db = _dbFactory.GetRWDb())
            {
                var service = new DSItemsSync(_log, _time, api, _dbFactory);
                service.SendInventoryUpdates();
            }
        }

        public void CallUpdateFulfillmentData(IMarketOrderUpdaterApi api, IList<string> orderNumbers)
        {
            using (var db = _dbFactory.GetRWDb())
            {
                var service = new BaseOrderUpdater(api, _log, _time);
                service.UpdateOrders(db, orderNumbers);
            }
        }

        public void CopyFromShopifyListingsDirect()
        {
            var destMarket = MarketType.DropShipper;
            var destMarketplaceId = MarketplaceKeeper.DsDWS;

            var when = _time.GetAppNowTime();
            long? by = null;
            using (var db = _dbFactory.GetRWDb())
            {
                db.DisableValidation();
                db.DisableAutoDetectChanges();
                db.DisableProxyCreation();

                var allStyles = db.Styles.GetAllAsDtoLite()
                    .ToList();

                var existItems = db.Items.GetAll().Where(i => i.Market == (int)destMarket
                                                                && i.MarketplaceId == destMarketplaceId)
                    .ToList();
                //var existListings = db.Listings.GetAll().Where(i => i.Market == (int)destMarket
                //                                                      && i.MarketplaceId == destMarketplaceId
                //                                                      && !i.IsRemoved)
                //    .ToList();
                var existParentItems = db.ParentItems.GetAll().Where(i => i.Market == (int)destMarket
                                                                && i.MarketplaceId == destMarketplaceId)
                    .ToList();

                var shopifyItems = db.Items.GetAll().Where(i => i.Market == (int)MarketType.Shopify
                                                                && i.MarketplaceId == MarketplaceKeeper.ShopifyBNW
                                                                && (i.ItemPublishedStatus == (int)PublishedStatuses.Published
                                                                    || i.ItemPublishedStatus == (int)PublishedStatuses.Unpublished
                                                                    || i.ItemPublishedStatus == (int)PublishedStatuses.HasChanges
                                                                    || i.ItemPublishedStatus == (int)PublishedStatuses.PublishingErrors))
                    .ToList();
                var shopifyListings = db.Listings.GetAll().Where(i => i.Market == (int)MarketType.Shopify
                                                                      && i.MarketplaceId == MarketplaceKeeper.ShopifyBNW
                                                                      && !i.IsRemoved)
                    .ToList();
                var shopifyParentItems = db.ParentItems.GetAll().Where(i => i.Market == (int)MarketType.Shopify
                                                                && i.MarketplaceId == MarketplaceKeeper.ShopifyBNW)
                    .ToList();

                foreach (var style in allStyles)
                {
                    var shopifyItem = shopifyItems.FirstOrDefault(i => i.StyleId == style.Id);
                    var magentoItem = existItems.FirstOrDefault(i => i.StyleId == style.Id);
                    if (shopifyItem != null && magentoItem == null)
                    {
                        _log.Info("Copy for style: " + style.StyleID);

                        var shopifyParentItem =
                            shopifyParentItems.FirstOrDefault(pi => pi.ASIN == shopifyItem.ParentASIN);
                        var shopifyListing = shopifyListings.FirstOrDefault(l => l.ItemId == shopifyItem.Id);

                        if (shopifyListing != null
                            && shopifyParentItem != null)
                        {
                            shopifyParentItem.Id = 0;
                            shopifyParentItem.Market = (int)destMarket;
                            shopifyParentItem.MarketplaceId = destMarketplaceId;
                            db.ParentItems.Add(shopifyParentItem);
                            db.Commit();

                            shopifyItem.Id = 0;
                            shopifyItem.Market = (int)destMarket;
                            shopifyItem.MarketplaceId = destMarketplaceId;
                            shopifyItem.ItemPublishedStatus = (int)PublishedStatuses.New;
                            db.Items.Add(shopifyItem);
                            db.Commit();

                            shopifyListing.Id = 0;
                            shopifyListing.ItemId = shopifyItem.Id;
                            shopifyListing.Market = (int)destMarket;
                            shopifyListing.MarketplaceId = destMarketplaceId;
                            shopifyListing.AmazonCurrentPrice = null;
                            shopifyListing.AmazonRealQuantity = null;
                            db.Listings.Add(shopifyListing);
                            db.Commit();
                        }
                    }
                }
            }
        }

        public void GetOrders(IMarketApi api)
        {
            var orders = api.GetOrders(_log, DateTime.UtcNow.AddDays(-40), null);
            _log.Info(orders.Count().ToString());
        }
    }
}
